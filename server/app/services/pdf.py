
from fpdf import FPDF
from fpdf.enums import XPos, YPos

import pprint

import fpdf

# from cairosvg import svg2png
from bs4 import BeautifulSoup
from PIL import Image
import pathlib
import datetime
import asyncio
import os

blue = '#42AAFF'
yellow = '#ffff00'
red = '#FF0000'

green = [34,177,76]
yellow = [243,155,22]
red = [197,45,45]

rosy = [255,244,229]
blue = [230,241,247]


carcodes = {        '1':'M558.299 317.8C559.099 344.1 544.199 385 544.199 385L545.999 386.4L557.799 395L635.899 391.4C638.667 392.51 641.722 392.685 644.599 391.9C662.099 387.2 673.959 378.37 680.599 358.9C681.499 356.27 682.699 353.75 683.439 351.07C683.439 351.07 686.389 342.78 686.559 340.55C687.159 332.55 688.659 313.19 688.659 313.19L558.299 311.6V317.8Z',
                    '2':'M529.599 589.7L433.099 589.5L439.899 572.9L436.099 522.1L433.299 514.5V475.3C433.299 475.3 476.899 474.8 507.999 495.9C519.599 503.8 532.899 513.2 537.799 517.8L543.999 514.5C543.999 514.5 617.699 531.3 634.199 536.3C629.299 536.3 640.899 549.1 640.899 549.1L675.199 551C675.199 551 678.399 552.6 679.799 558.9L683.899 558.7C685.299 559.9 684.999 564.8 684.999 568.3C685 568.537 684.955 568.771 684.865 568.99C684.775 569.209 684.642 569.408 684.475 569.576C684.307 569.743 684.108 569.876 683.889 569.966C683.67 570.056 683.436 570.101 683.199 570.1L681.699 578.5H682.199C682.436 578.499 682.67 578.544 682.889 578.634C683.108 578.724 683.307 578.857 683.475 579.024C683.642 579.192 683.775 579.391 683.865 579.61C683.955 579.829 684 580.063 683.999 580.3V580.5C684.007 581.003 683.882 581.5 683.636 581.939C683.39 582.378 683.032 582.744 682.599 583C679.166 585.1 675.511 586.81 671.699 588.1C654.699 588 633.199 589.4 629.499 589.6C629.327 589.617 629.154 589.589 628.996 589.518C628.839 589.448 628.702 589.339 628.599 589.2C628.023 588.485 627.675 587.615 627.599 586.7C627.699 578.2 628.399 553.3 605.799 543.5C597.262 539.928 587.741 539.468 578.899 542.2C578.899 542.2 551.499 550.1 551.799 589.5L529.599 589.7Z',
                    '3':'M359.199 588.6L428.499 588.8L434.599 573.1C434.599 573.1 433.499 528.8 430.999 521.7L428.499 514.7V475.2C428.499 475.2 386.199 475.2 366.499 480.1L359.399 481.7L355.199 482.7L339.399 481.5C339.399 481.5 284.099 500.6 279.199 505.3L241.599 509.6L233.099 518.7L229.099 535.9C229.099 535.9 227.599 540.5 226.099 541.8C224.599 543.1 218.499 549.6 218.499 551.5C218.499 553.4 217.199 571.2 225.499 576C235.799 578.3 283.099 585.5 283.099 585.5C283.099 585.5 279.199 540.8 322.099 540.3C350.499 540.7 360.999 563.7 358.999 587L359.199 588.6Z',
                    '4':'M333.499 313.7C333.299 347 339.899 365.8 339.899 365.8L281.899 373.6L256.599 387.1L248.199 390.2L241.599 390C241.599 390 230.599 389.4 222.799 375.7C216.599 365 213.099 346.1 212.999 313.2C227.899 313.6 333.499 313.7 333.499 313.7Z',
                    '5':'M333.499 310.9C333.299 277.6 340.299 255.8 340.299 255.8L281.799 248L256.599 234.5L248.099 231.4L241.499 231.6C241.499 231.6 230.499 232.2 222.699 245.9C216.499 256.7 213.099 277.5 212.899 310.4C227.899 310 333.499 310.9 333.499 310.9Z',
                    '6':'M357.599 22.5L426.899 22.3L432.999 38C432.999 38 431.899 82.3 429.399 89.4L426.899 96.5V135.9C426.899 135.9 384.599 135.9 364.899 131L357.799 129.4L353.599 128.4L337.799 129.6C337.799 129.6 282.499 110.5 277.699 105.8L240.199 101.4L231.599 92.4L227.599 75.3C227.599 75.3 226.099 70.7 224.599 69.4C223.099 68.1 216.999 61.6 216.999 59.7C216.999 57.8 215.699 40 223.999 35.2C234.299 32.9 281.599 25.7 281.599 25.7C281.599 25.7 277.599 70.4 320.499 71C348.899 70.6 359.399 47.5 357.399 24.3L357.599 22.5Z',
                    '7':'M527.999 21.3L431.599 21.5L438.399 38.1L434.599 88.9L431.799 96.5V135.6C431.799 135.6 475.399 136.1 506.499 115C518.099 107.1 531.399 97.7 536.299 93.1L542.499 96.4C542.499 96.4 616.199 79.6 632.699 74.6C627.799 74.6 639.399 61.8 639.399 61.8L673.599 59.9C673.599 59.9 676.799 58.3 678.199 52L682.299 52.2C683.699 51 683.399 46.1 683.399 42.6C683.4 42.3632 683.355 42.1286 683.265 41.9096C683.175 41.6906 683.042 41.4917 682.875 41.3242C682.707 41.1568 682.508 41.0243 682.289 40.9343C682.07 40.8443 681.836 40.7987 681.599 40.8L680.099 32.4H680.599C681.087 32.4056 681.559 32.2209 681.914 31.8849C682.268 31.5489 682.478 31.0881 682.499 30.6V30.3C682.507 29.7968 682.382 29.3004 682.136 28.8613C681.89 28.4222 681.532 28.056 681.099 27.8C677.666 25.7004 674.011 23.9898 670.199 22.7C653.199 22.8 631.699 21.4 627.999 21.2C627.827 21.1833 627.654 21.2114 627.496 21.2815C627.339 21.3516 627.202 21.4613 627.099 21.6C626.523 22.3146 626.175 23.1854 626.099 24.1C626.099 32.6 626.899 57.5 604.299 67.3C595.762 70.8719 586.241 71.3321 577.399 68.6C577.399 68.6 549.999 60.7 550.299 21.3H527.999Z',
                    '8':'M558.299 308.4L688.799 309.6C688.799 309.6 687.429 286.47 686.929 281.07C686.429 275.67 684.199 274.3 684.199 274.3C683.117 269.348 681.396 264.558 679.079 260.05C678.779 259.35 677.079 256.49 676.809 255.79C674.509 250.79 662.099 234.9 644.599 230.1C641.722 229.315 638.667 229.49 635.899 230.6L557.099 225.2L545.999 235.6L542.699 239C542.699 239 559.099 277.9 558.299 304.2V308.4Z',
                    '9':'M344.199 256.6C344.099 256.6 404.099 259.5 425.499 259.5C447.499 259.5 485.999 254.2 485.999 254.2C497.799 325.7 484.899 367.9 484.899 367.9C484.899 367.9 447.799 361.9 425.799 361.9C404.499 361.9 344.499 364.6 344.499 364.6C344.499 364.1 329.699 324.1 344.199 256.6Z',
                    '10':'M596.82 496.3L600.12 494C600.12 494 675.12 511.2 692.02 516.2C687.02 516.2 698.82 529.3 698.82 529.3L733.72 531.2C733.72 531.2 737.02 532.8 738.42 539.2L742.62 539C744.12 540.3 743.72 545.2 743.72 548.8C743.72 549.8 742.92 550.6 741.92 550.6L740.42 559.1H740.92C741.92 559.1 742.82 559.9 742.82 561V561.3C742.82 562.3 742.32 563.3 741.42 563.9C737.92 566 734.22 567.8 730.32 569.1C713.02 569 691.12 570.4 687.32 570.6C686.92 570.6 686.62 570.5 686.32 570.2C685.72 569.5 685.42 568.6 685.32 567.7C685.42 559 686.22 533.7 663.12 523.7C654.42 520.1 644.72 519.6 635.72 522.3C635.72 522.3 607.82 530.3 608.12 570.5H589.72L597.62 555.3C597.62 555.3 601.72 516.1 600.42 504.8C597.02 498.1 596.82 496.3 596.82 496.3Z',
                    '11':'M563.42 475C575.22 483 588.82 492.6 593.82 497.3L596.52 504.7C596.52 504.7 600.12 536.9 593.22 554.9C589.92 560.7 585.42 570.4 585.42 570.4L487.12 570.2L494.02 553.3L490.22 501.5L487.32 493.8V454C487.22 454 531.62 453.5 563.42 475Z',
                    '12':'M414.82 569.3L482.42 569.5L488.62 553.5C488.62 553.5 487.52 508.3 484.92 501.1L482.32 493.9V453.8C482.32 453.8 439.22 453.8 419.12 458.8L411.82 460.4L398.42 491.9L395.92 498.1L425.92 552.4L414.82 569.3Z',
                    '13':'M420.62 552.3L390.52 499L407.62 461.4L391.52 460.1C391.52 460.1 335.22 479.5 330.22 484.3L291.92 488.8L283.32 498.1L279.22 515.6C279.22 515.6 277.62 520.3 276.12 521.6C274.62 522.9 268.42 529.6 268.42 531.5C268.42 533.4 267.12 551.6 275.52 556.5C286.02 558.9 334.22 566.2 334.22 566.2C334.22 566.2 330.22 520.7 373.92 520.1C402.82 520.5 413.52 544 411.52 567.7L417.02 559.4L420.62 552.3Z',
                    '14':'M96.0201 300.3L127.92 300.1C127.92 300.1 128.92 347.3 128.22 371.8C128.22 375.2 127.62 378.5 126.42 381.7C125.62 383.6 123.72 384.8 121.62 384.8H120.62C120.62 384.8 103.02 385.8 96.8201 376.1C95.3201 373.4 96.0201 305.3 96.0201 300.3Z',
                    '15':'M95.8201 296.6H128.02C128.02 296.6 129.02 249.5 128.32 225.1C128.32 221.7 127.72 218.4 126.52 215.2C125.72 213.3 123.82 212.1 121.72 212.1H120.72C120.72 212.1 103.12 211.1 96.9201 220.8C95.3201 223.6 95.8201 291.6 95.8201 296.6Z',
                    '16':'M418.42 40.7L388.12 94.4L405.32 132.3L389.12 133.6C389.12 133.6 332.42 114 327.42 109.1L288.92 104.6L280.22 95.3L276.12 77.7C276.12 77.7 274.52 73 273.02 71.6C271.52 70.2 265.32 63.6 265.32 61.7C265.32 59.8 264.02 41.5 272.52 36.5C283.12 34.1 331.62 26.8 331.62 26.8C331.62 26.8 327.52 72.6 371.52 73.3C400.62 72.9 411.42 49.2 409.42 25.4L415.02 33.7L418.42 40.7Z',
                    '17':'M412.52 23.6L480.62 23.4L486.92 39.5C486.92 39.5 485.82 85 483.22 92.2L480.62 99.4V139.8C480.62 139.8 437.22 139.8 417.02 134.8L409.72 133.2L396.22 101.5L393.72 95.2L424.02 40.5L412.52 23.6Z',
                    '18':'M562.12 118.5C574.02 110.4 587.72 100.8 592.72 96L595.42 88.5C595.42 88.5 599.02 56.1 592.02 37.9C588.62 32.1 584.12 22.2 584.12 22.2L485.12 22.4L492.02 39.4L488.12 91.6L485.22 99.4V139.5C485.52 139.6 530.22 140.2 562.12 118.5Z',
                    '19':'M595.82 97.1L599.12 99.5C599.12 99.5 674.72 82.2 691.72 77.1C686.72 77.1 698.52 63.9 698.52 63.9L733.62 61.9C733.62 61.9 736.92 60.3 738.42 53.8L742.62 54.1C744.12 52.8 743.72 47.8 743.72 44.2C743.72 43.2 742.92 42.4 741.92 42.4L740.42 33.8H740.92C741.92 33.8 742.82 33 742.82 31.9V31.6C742.82 30.5 742.32 29.6 741.42 29C737.92 26.9 734.12 25.1 730.22 23.7C712.82 23.8 690.72 22.4 686.92 22.2C686.52 22.2 686.22 22.3 685.92 22.6C685.32 23.3 684.92 24.2 684.92 25.1C685.02 33.9 685.82 59.4 662.52 69.4C653.82 73.1 644.02 73.6 634.92 70.8C634.92 70.8 606.82 62.8 607.12 22.3H588.82L596.82 37.6C596.82 37.6 600.92 77 599.62 88.5C596.02 95.3 595.82 97.1 595.82 97.1Z',
                    '20':'M873.02 294.9L918.32 294.3V220.4C918.32 216.1 906.92 210.9 901.52 209.7C896.12 208.5 882.92 208.2 882.92 208.2C882.92 208.2 876.72 214.1 873.42 217.9C865.42 217.7 862.42 221.2 862.42 221.2L862.32 247.9C862.32 249.1 863.02 250.3 864.22 250.7C867.42 252.1 873.72 254.7 875.62 254.7C876.62 257.3 880.52 259.8 880.52 259.8V262.8C875.42 262.5 872.62 265.3 872.72 271C872.72 276.6 873.02 294.9 873.02 294.9Z',
                    '21':'M873.02 297.4L918.42 297V376.4C918.42 380.7 904.62 383.6 899.22 384.8C893.82 386 881.82 386.4 881.82 386.4C878.82 384.2 876.02 381.7 873.52 378.9C865.52 379.1 862.52 375.6 862.52 375.6L862.42 348.9C862.42 347.7 863.12 346.5 864.32 346.1C867.52 344.7 873.82 342.1 875.72 342.1C877.42 340.5 879.32 339.1 881.32 337.9C880.72 336.6 880.32 335.2 880.12 333.8C875.82 333.9 873.02 331.8 873.12 326.1C873.22 320.4 873.02 297.4 873.02 297.4Z',
                    '22':'M708.72 364.3C703.62 369.8 697.22 376.1 693.62 377.5C690.02 379 690.72 380.1 690.72 380.1C690.72 380.1 652.12 383.4 611.72 384.1L596.72 372.4L542.52 357C542.52 357 557.82 313.7 543.32 243.3L596.52 228.1L599.82 224.7L610.92 214.3L689.72 219.7C689.72 219.7 705.12 228.9 714.82 245.2L717.02 249C718.22 251.1 720.12 252.8 722.32 253.7L728.22 256.2L729.72 263.5C729.72 263.5 727.32 264.1 727.82 269.5C728.32 274.9 728.32 307.7 728.32 307.7L727.92 331.4C727.92 331.4 727.72 334.8 730.72 335.8C730.72 335.8 729.02 342 727.42 344.2L724.12 345.6C721.32 346.8 719.02 348.9 717.42 351.5C715.32 355.3 711.82 360.9 708.72 364.3Z',
                    '23':'M398.02 245.7C397.92 245.7 457.92 248.6 479.32 248.6C501.32 248.6 539.82 243.3 539.82 243.3C551.62 314.8 538.72 357 538.72 357C538.72 357 501.62 351 479.62 351C458.32 351 398.32 353.7 398.32 353.7C398.32 353.2 383.52 313.3 398.02 245.7Z',
                    '24':'M266.62 292.5C268.22 222.5 295.22 220.8 295.22 220.8L301.72 220.6L310.12 223.7L335.32 237.2L393.82 245C393.82 245 380.22 313.8 395.12 354.9L335.62 362.7L310.42 376.2L302.02 379.3L295.52 379.1C295.52 379.1 267.22 377.3 266.82 302.3V302C266.62 298.9 266.62 295.7 266.62 292.5Z',
                    '25':'M687.32 638.4C687.22 638.4 687.02 638.4 686.92 638.4V649.3C686.92 655.9 684.52 661.3 677.92 661.3H617.42C610.82 661.3 605.42 655.9 605.42 649.3V637.4C582.32 637.1 433.52 638.3 413.42 638.4V650.4C413.42 657 408.02 662.4 401.42 662.4H342.82C336.22 662.4 330.82 657 330.82 650.4V638.9C329.42 638.8 318.72 638.6 318.82 638.5C309.02 638.7 278.92 636.5 272.42 649.2C265.42 662.8 262.82 717.8 267.62 770.3C269.52 797.8 291.12 791 331.52 792.1V783.7C331.52 777.1 336.92 771.7 343.52 771.7H402.02C408.62 771.7 414.02 777.1 414.02 783.7V794.2C414.32 794.3 414.52 795.4 414.52 795.5C420.62 795.7 589.72 796.5 603.42 796.7H606.12L605.62 782.9C605.62 776.3 612.02 770.9 618.62 770.9H676.12C682.72 770.9 688.12 776.3 688.12 782.9V795.4C700.22 795.3 743.92 795.8 743.42 721.4C742.32 682.1 738.02 638.5 687.32 638.4Z',

                    '30':'M992.267 410.8V482.9C992.267 488.2 994.267 493.4 997.967 497.3L1000.77 500.2C1004.47 504.1 1009.57 506.4 1014.97 506.5L1027.37 506.7L1027.47 523.8C1027.47 527.1 1030.17 529.8 1033.57 529.8H1076.67V521.4C1076.67 517.4 1073.47 514.2 1069.47 514.2H1037.07V519.4H1032.97V507H1034.87L1180.57 510C1185.07 510.1 1189.57 508.6 1193.07 505.8L1195.47 503.9V410.6L992.267 410.8Z',
                    '31':'M856.067 585.7C905.367 587.6 903.167 607.5 903.167 607.5C903.167 607.5 916.067 626 921.667 639.7C927.367 653.4 939.467 722.7 939.467 735.1H935.867C935.867 735.1 936.867 748.1 936.567 750.6L938.967 751L938.867 786L934.767 789.8H878.767L877.967 773.8C877.667 768.2 875.867 762.9 872.967 758.2C869.467 752.9 864.367 746.7 857.867 745.3C857.567 728 856.867 610 856.867 610L856.067 585.7Z',
                    '32':'M549.067 585.7H722.867V580H804.467V585.7H851.567L853.167 743.3H821.267C821.267 743.3 799.367 747.2 796.667 765.4C793.967 783.6 794.767 789.7 794.767 789.7H551.667L549.067 585.7Z',
                    '33':'M391.767 585.7H468.367V580H541.667V585.7H544.867L547.067 759.3C547.067 759.3 537.767 744.9 525.967 742.8H495.567C494.067 742.8 492.467 743 491.067 743.5C485.067 745.5 470.667 751.8 468.967 766.7C466.767 785.5 467.567 789.5 467.567 789.5H363.167V604.8C363.167 598.4 366.967 592.6 372.867 589.9C378.867 587.1 385.267 585.7 391.767 585.7Z',
                    '34':'M105.767 411.2H307.367V483.3C307.367 488.6 305.367 493.8 301.667 497.7L298.867 500.6C295.167 504.5 290.067 506.8 284.667 506.9L272.267 507L272.167 523.7C272.167 527.2 269.267 530 265.767 530H222.967V520.3C222.967 517 225.667 514.4 228.867 514.4H262.367V519.6H266.467V507.1H264.567L118.867 510.1C114.367 510.2 109.967 508.7 106.367 505.9L103.967 504V411L105.767 411.2Z',
                    '35':'M307.367 408.6V336.6C307.367 331.3 305.367 326.1 301.667 322.2L298.867 319.3C295.167 315.4 290.067 313.1 284.667 313L272.267 312.8L272.167 295.7C272.167 292.4 269.467 289.7 266.067 289.7H222.967V298.1C222.967 302.1 226.167 305.3 230.167 305.3H262.467V300H266.567V312.5H264.667L118.967 309.5C114.467 309.4 110.067 310.9 106.467 313.7L104.067 315.6V408.8L307.367 408.6Z',
                    '36':'M391.767 234H467.967V239.6H540.967V234H544.167L546.267 61.3C546.267 61.3 537.067 75.6 525.267 77.7H494.967C493.467 77.7 491.867 77.5 490.467 77C484.567 75.1 470.167 68.7 468.467 53.9C466.367 35 467.067 31 467.067 31H363.167V215C363.167 221.3 366.967 227.2 372.767 229.8C378.767 232.5 385.167 234 391.767 234Z',
                    '37':'M548.167 234H721.067V239.6H802.267V234H849.167L850.767 77.2H819.067C819.067 77.2 797.267 73.3 794.567 55.2C791.867 37.1 792.767 31 792.767 31H550.767L548.167 234Z',
                    '38':'M853.567 234C902.467 232.2 900.467 212.4 900.467 212.4C900.467 212.4 913.267 194 918.867 180.4C924.467 166.8 936.567 97.8 936.567 85.5H932.967C932.967 85.5 933.967 72.6 933.667 70L935.967 69.6L935.867 34.8L931.767 30.9H876.067L875.267 47C874.967 52.5 873.267 57.8 870.267 62.6C866.767 67.9 861.667 74.1 855.267 75.4C854.967 92.5 854.267 210 854.267 210L853.567 234Z',
                    '39':'M1193.77 408.2H992.267V336.1C992.267 330.8 994.267 325.6 997.967 321.7L1000.77 318.8C1004.47 314.9 1009.57 312.6 1014.97 312.5L1027.37 312.3L1027.47 295.6C1027.47 292.1 1030.37 289.3 1033.87 289.3H1076.67V299C1076.67 302.3 1074.07 304.9 1070.77 304.9H1037.17V299.7H1033.07V312.2H1034.97L1180.67 309.2C1185.17 309.1 1189.67 310.6 1193.17 313.4L1195.57 315.3V408.2H1193.77Z',
                    '40':'M839.667 306.1H926.467C933.167 306.1 938.667 311.6 938.667 318.3V506.3C938.667 513 933.167 518.5 926.467 518.5H839.667V306.1Z',
                    '41':'M834.667 306.1H553.667V518.5H834.667V306.1Z',
                    '42':'M548.567 518.4H375.567C368.867 518.4 363.367 512.9 363.367 506.2V318.3C363.367 311.6 368.867 306.1 375.567 306.1H548.667V518.4H548.567Z',
                    '43':'M375.867 871.8H926.267C933.167 871.8 938.867 877.5 938.867 884.4V1016.3C938.867 1023.2 933.167 1028.9 926.267 1028.9H375.867C368.967 1028.9 363.267 1023.2 363.267 1016.3V884.4C363.267 877.3 368.967 871.8 375.867 871.8Z',

                    '50':'M1004.58 164.214L1038.46 165.235L1039.68 151.151C1040.79 139.357 1037.82 127.54 1031.27 117.675C1028.91 113.972 1025.81 110.793 1022.17 108.337C1024.51 108.194 1026.85 108.194 1029.19 108.337C1029.19 108.337 1018.21 72.4115 989.788 67.5126L970.614 86.3937L968.065 88.1798L947.667 80.7804V73.3811L947.228 68.9211L942.506 56.3779C941.68 47.8253 947.667 48.6009 947.667 48.6009V40.9464C948.492 40.2247 949.132 39.3145 949.531 38.293C949.931 37.2715 950.078 36.1687 949.962 35.078L937.6 30.0566L936.958 23.0859L941.547 17.7278L935.224 12.0329C934.178 11.0892 932.982 10.3269 931.685 9.77733C925.566 7.21563 907.208 -0.265365 905.086 1.42883C902.537 3.47003 906.361 21.8408 908.401 26.1784C909.747 29.036 915.591 33.4348 919.436 36.1088L926.892 42.3038L936.407 60.5521L937.6 66.788C937.6 66.788 930.125 59.8888 921.476 64.4814C909.441 70.8704 911.349 84.9751 912.542 88.1798C908.391 87.8634 909.288 82.5461 906.106 86.3529C902.924 90.1597 906.106 106.244 906.106 106.244C906.106 106.244 925.127 98.5899 933.643 118.492H941.517L943.2 122.717L971.757 185.79L981.517 177.799L996.132 209.631C996.132 209.631 959.008 230.615 953.582 278.266C961.221 270.918 966.331 264.999 966.331 264.999L964.383 295.933C964.382 308.052 966.826 320.047 971.568 331.198C976.311 342.349 983.254 352.428 991.982 360.829C1000.71 369.231 1011.04 375.783 1022.36 380.092C1033.68 384.402 1045.75 386.38 1057.86 385.909C1105.98 384.082 1144.39 344.013 1144.33 295.821C1144.31 281.102 1140.69 266.612 1133.77 253.623C1126.85 240.633 1116.86 229.54 1104.66 221.317L1094.31 214.846L1100.19 210.948H1104.78C1104.78 210.948 1081.77 192.75 1057.38 192.118L1055.99 190.219C1054.12 187.667 1051.67 185.591 1048.85 184.162C1046.03 182.733 1042.91 181.99 1039.74 181.993C1032.23 181.993 1022.02 181.493 1014.72 179.187C1001.8 175.104 1004.53 164.214 1004.53 164.214',
                    '51':'M966.953 188.801L936.785 122.717H929.788C929.788 122.717 920.721 107.112 901.568 111.194C901.568 101.631 899.977 98.8144 899.977 98.8144C899.977 98.8144 844.903 79.1168 807.299 112.623C792.246 128.146 786.953 135.638 786.953 135.638C780.892 135.058 774.776 135.725 768.982 137.597C758.248 140.949 746.898 141.835 735.774 140.189C721.261 137.934 713.796 133.341 708.125 131.218C703.791 129.585 697.059 124.799 691.705 120.655C683.95 114.569 674.114 111.779 664.321 112.888C642.903 115.511 643.923 131.81 651.358 132.576L664.933 176.4C664.933 176.4 684.617 179.36 706.218 200.088L679.935 212.407C679.935 212.407 721.669 219.837 763.373 298.454C763.373 298.454 772.021 307.425 783.138 309.344C794.255 311.262 847.83 320.57 879.865 298.882C879.865 298.882 910.992 287.411 927.381 234.717L928.687 228.89C928.687 228.89 939.906 242.086 947.341 242.158C946.912 234.85 947.198 211.621 966.953 188.801Z',
                    '52':'M628.645 385.103C604.782 385.103 581.897 375.617 565.023 358.731C548.15 341.846 538.67 318.945 538.67 295.065L540.098 277.848C540.098 277.848 535.58 283.635 534.142 285.829C532.194 288.023 506.676 297.137 501.21 298.893C500.241 285.319 508.584 264.58 508.584 264.58C508.584 264.58 505.238 256.058 508.206 248.894C515.998 230.053 517.018 218.276 504.943 205.283L504.667 204.416C504.838 201.64 506.023 199.024 507.995 197.065C509.968 195.106 512.591 193.941 515.366 193.791L564.106 191.179C569.033 187.943 566.962 189.444 589.063 179.544C580.088 167.562 581.638 157.213 581.638 157.213L558.354 142.731L552.592 116.379H561.995C563.485 116.377 564.972 116.258 566.442 116.022C567.574 115.828 569.063 115.573 570.797 115.236C577.467 113.95 587.737 111.511 595.07 107.734C603.903 103.193 645.84 132.168 645.84 132.168C645.84 132.168 659.099 175.268 661.078 181.054C673.632 181.82 696.774 199.313 696.774 199.313L667.401 213.816C687.911 221.98 698.089 237.82 706.157 248.873L710.481 249.771L725.127 266.315L738.202 263.682L758.181 298.454L717.019 300.669C717.019 300.669 721.404 335.522 680.598 367.834C678.698 369.359 676.675 370.724 674.55 371.917C653.5 383.633 628.645 385.103 628.645 385.103Z',
                    '53':'M631.47 570.627L597.589 571.648L596.366 557.564C595.244 545.772 598.216 533.954 604.78 524.098C607.138 520.39 610.235 517.207 613.877 514.749C611.54 514.607 609.197 514.607 606.86 514.749C606.86 514.749 617.834 478.835 646.259 473.925L665.382 492.807L667.931 494.593L688.329 487.193V479.794L688.757 475.334L693.51 462.821C694.336 454.269 688.35 455.044 688.35 455.044V447.39C687.524 446.668 686.885 445.758 686.485 444.736C686.086 443.715 685.938 442.612 686.055 441.521L698.406 436.5L699.058 429.529L694.469 424.171L700.792 418.446C701.835 417.498 703.032 416.735 704.331 416.19C710.451 413.628 728.809 406.148 730.93 407.842C733.48 409.883 729.655 428.254 727.615 432.591C726.269 435.449 720.476 439.848 716.58 442.522L709.114 448.727L699.629 466.975L698.436 473.201C698.436 473.201 705.912 466.302 714.561 470.894C726.595 477.283 724.688 491.388 723.495 494.593C727.646 494.276 726.748 488.959 729.93 492.776C733.112 496.593 729.93 512.657 729.93 512.657C729.93 512.657 710.909 505.003 702.393 524.904H694.52L692.837 529.13L664.28 592.213L654.52 584.211L639.905 616.044C639.905 616.044 677.008 637.027 682.485 684.689C674.846 677.331 669.737 671.422 669.737 671.422L671.685 702.366C671.684 714.485 669.239 726.48 664.495 737.63C659.751 748.781 652.807 758.859 644.078 767.26C635.349 775.66 625.015 782.211 613.695 786.519C602.375 790.827 590.303 792.805 578.201 792.332C530.052 790.495 491.653 750.385 491.715 702.234C491.733 687.516 495.358 673.027 502.273 660.038C509.188 647.049 519.182 635.955 531.378 627.73L541.73 621.269L535.856 617.36H531.266C531.266 617.36 554.214 599.204 578.609 598.571L579.996 596.683C581.867 594.129 584.313 592.053 587.136 590.622C589.959 589.191 593.079 588.446 596.243 588.447C603.76 588.447 613.979 587.947 621.271 585.651C634.183 581.568 631.47 570.668 631.47 570.668',
                    '54':'M669.033 595.254L699.201 529.16H706.208C706.208 529.16 715.265 513.566 734.428 517.648C734.428 508.075 736.009 505.268 736.009 505.268C736.009 505.268 791.083 485.56 828.697 519.067C843.75 534.59 849.044 542.081 849.044 542.081C855.118 541.494 861.248 542.161 867.055 544.041C877.792 547.391 889.145 548.281 900.273 546.643C914.776 544.377 922.251 539.785 927.912 537.662C932.246 536.039 938.978 531.242 944.342 527.099C952.099 521.015 961.934 518.226 971.726 519.332C993.144 521.965 992.124 538.254 984.689 539.019L971.114 582.844C971.114 582.844 951.42 585.814 929.829 606.532L956.102 618.851C956.102 618.851 914.368 626.281 872.675 704.897C872.675 704.897 864.026 713.868 852.899 715.787C841.772 717.706 788.207 727.014 756.173 705.336C756.173 705.336 725.045 693.865 708.656 641.161L707.361 635.333C707.361 635.333 696.142 648.54 688.707 648.601C689.084 641.263 688.799 618.034 669.033 595.254Z',
                    '55':'M1007.34 791.526C1019.16 791.526 1030.86 789.197 1041.77 784.672C1052.69 780.147 1062.61 773.515 1070.96 765.154C1079.32 756.794 1085.94 746.868 1090.47 735.944C1094.99 725.02 1097.32 713.312 1097.32 701.488L1095.9 684.251C1095.9 684.251 1100.42 690.037 1101.85 692.232C1103.79 694.426 1129.32 703.54 1134.79 705.305C1135.74 691.732 1127.4 670.983 1127.4 670.983C1127.4 670.983 1130.75 662.461 1127.79 655.296C1120 636.456 1118.98 624.678 1131.05 611.696L1131.32 610.818C1131.15 608.043 1129.96 605.427 1127.99 603.468C1126.02 601.509 1123.39 600.344 1120.62 600.194L1071.89 597.581C1066.97 594.346 1069.04 595.856 1046.93 585.946C1055.91 573.965 1054.36 563.616 1054.36 563.616L1077.65 549.144L1083.39 522.792H1073.99C1072.5 522.79 1071.01 522.671 1069.54 522.435C1068.41 522.251 1066.92 521.985 1065.19 521.649C1058.53 520.363 1048.26 517.934 1040.93 514.157C1032.08 509.606 990.155 538.58 990.155 538.58C990.155 538.58 976.897 581.69 974.908 587.467C962.363 588.233 939.273 605.736 939.273 605.736L968.646 620.228C948.136 628.393 937.957 644.233 929.89 655.286L925.566 656.184L910.879 672.728L897.794 670.105L877.804 704.867L918.957 707.081C918.957 707.081 914.571 741.935 955.377 774.247C957.28 775.768 959.303 777.133 961.425 778.329C982.496 790.046 1007.34 791.526 1007.34 791.526Z',

                    '60':'M1289.68 462.4V513.9C1289.68 513.9 1294.18 517.9 1294.48 519.4V541.3C1294.48 544.1 1293.08 546.7 1290.68 548.2C1287.68 550.1 1282.68 552.5 1274.08 554.6C1272.58 555 1271.08 555.2 1269.58 555.2H1265.88C1264.68 555.2 1263.58 554.9 1262.58 554.4C1261.38 553.8 1259.68 553.1 1258.88 553.2C1257.58 553.4 1196.88 555.5 1185.58 554.5C1175.08 554.5 1123.88 548.2 1119.38 547C1115.88 546.3 1112.88 542.5 1111.68 538.3C1110.48 534.1 1109.38 504.8 1109.18 462.5L1289.68 462.4Z',
                    '61':'M1105.28 462.4H1031.98V568H1244.78V557.2L1186.38 558.4C1185.68 558.4 1184.98 558.4 1184.28 558.3C1176.48 557.6 1127.78 553.1 1128.08 553C1128.38 552.9 1121.18 552.7 1116.08 551.1C1115.48 550.9 1114.98 550.6 1114.38 550.3C1110.58 548 1107.98 544.1 1107.28 539.7C1106.78 536.9 1106.48 534 1106.28 531.2L1105.28 462.4Z',
                    '62':'M935.88 886.2L935.58 875H940.98V875.2C940.98 877.2 941.98 879.1 943.58 880.4C945.78 882 948.58 882.8 951.28 882.8L957.98 882.7C961.08 882.6 964.08 881.2 965.88 878.7L965.98 878.6V862.7C965.98 860.2 964.68 857.8 962.58 856.5L961.68 855.9L963.38 852.6V801.7C960.38 775.1 926.28 718.8 921.88 710.7C918.38 704.1 909.28 703.8 905.88 703.9H902.58C891.58 703.8 841.38 703.2 821.98 703.7C818.08 703.8 814.58 706.4 813.38 710.2C813.38 710.3 813.28 710.4 813.28 710.4C811.58 716.1 810.68 721.9 810.68 727.9V797.3C811.68 799.1 812.98 800.8 814.38 802.4C813.48 810.4 814.88 822.2 815.98 829.3C816.48 832.8 809.48 835.5 813.08 835.5H832.18C832.38 838.7 832.38 842.1 832.18 845.3C820.58 853.5 817.78 867.5 817.18 874.7C817.18 874.8 817.18 875 817.18 875.1C817.18 877.4 819.08 879.3 821.38 879.3C821.38 879.3 820.08 841.9 859.78 842.2C899.48 842.5 900.28 873.5 900.28 873.5H905.28V886.4L934.78 886.5C935.18 886.3 935.48 886.3 935.88 886.2Z',
                    '63':'M600.38 892.6C600.38 892.6 600.88 902 591.48 911.5C571.18 929.6 552.78 925.6 538.48 916C526.38 907.9 526.68 892.4 526.68 892.4L524.38 886.2H509.88V879.5C509.88 879.5 462.08 880.5 463.08 879.5C464.08 878.5 464.38 854.1 463.08 854.1H456.28V860.7H436.78V843.8H808.48L808.78 838.8L819.18 838.9V854.1H812.08V879.2H795.88V886.2H615.28V892.4H607.68L600.38 892.6Z',
                    '64':'M805.18 786.6H425.28V841.1H805.18V786.6Z',
                    '65':'M805.18 623.5H425.28V782.1H805.18V623.5Z',
                    '66':'M196.78 567.8V460.5H367.18C367.18 460.5 367.88 567.8 367.18 567.8H196.78Z',
                    '67':'M193.68 460.5L158.08 460.6V565.3H193.68V460.5Z',
                    '68':'M98.6797 558.8V564.5H134.98V574.8H154.78V460.9H98.9797V510.3L98.6797 558.8Z',
                    '69':'M99.1799 408.3V457.7H154.98V343.8H135.18V354.1H98.8799V359.8L99.1799 408.3Z',
                    '70':'M193.68 354.3L158.08 354.4V457.1L193.68 457.4V354.3Z',
                    '71':'M196.78 350.1V457.4H367.18C367.18 457.4 367.88 350.1 367.18 350.1H196.78Z',
                    '72':'M805.48 142.8H426.28V301.1H805.48V142.8Z',
                    '73':'M805.48 84.1H426.28V138.5H805.48V84.1Z',
                    '74':'M601.08 32.7C601.08 32.7 601.58 23.3 592.18 13.8C571.88 -4.3 553.48 -0.200004 539.28 9.2C527.18 17.3 527.48 32.7 527.48 32.7L525.18 38.9H510.78V45.6C510.78 45.6 463.08 44.6 464.08 45.6C465.08 46.6 465.38 71 464.08 71H457.28V64.4H437.78V81.3H808.78L809.08 86.2L819.48 86.1V71H812.38V46H796.28V39H615.88V32.8H608.28L601.08 32.7Z',
                    '75':'M935.98 39L935.68 50.3H940.98V50.1C940.98 48.1 941.98 46.2 943.58 45C945.78 43.4 948.48 42.6 951.28 42.6L957.98 42.7C961.08 42.8 964.08 44.2 965.88 46.7L965.98 46.8V62.5C965.98 65 964.68 67.3 962.58 68.7L961.68 69.3L963.38 72.7V123.6C960.38 150.1 926.38 206.4 921.98 214.4C918.48 221 909.38 221.3 906.08 221.2H902.78C891.78 221.3 841.68 221.9 822.38 221.4C818.48 221.3 814.98 218.7 813.78 214.9C813.78 214.8 813.78 214.7 813.68 214.7C811.98 209 811.08 203.1 811.18 197.1V127.9C812.18 126.1 813.38 124.4 814.88 122.9C813.98 114.9 815.38 103.1 816.48 96.1C816.98 92.6 809.98 89.9 813.58 89.9H832.68C832.88 86.7 832.88 83.4 832.68 80.1C821.08 71.9 818.38 57.9 817.78 50.7C817.78 50.6 817.78 50.5 817.78 50.3C817.78 48 819.68 46.1 821.98 46.1C821.98 46.1 820.68 83.4 860.38 83.1C900.08 82.8 900.88 51.8 900.88 51.8H905.78V39L935.28 38.9C935.28 38.9 935.58 38.9 935.98 39Z',
                    '76':'M1289.68 458.4V406.9C1289.68 406.9 1294.18 402.9 1294.48 401.4V379.5C1294.48 376.7 1293.08 374.1 1290.68 372.6C1287.68 370.7 1282.68 368.3 1274.08 366.2C1272.58 365.8 1271.08 365.6 1269.58 365.6H1265.88C1264.68 365.6 1263.58 365.9 1262.58 366.4C1261.38 367 1259.68 367.7 1258.88 367.6C1257.58 367.4 1196.88 365.3 1185.58 366.3C1175.08 366.3 1123.88 372.6 1119.38 373.8C1115.88 374.5 1112.88 378.3 1111.68 382.5C1110.48 386.7 1109.38 416 1109.18 458.3L1289.68 458.4Z',
                    '77':'M1105.28 458.2H1031.98V352.6H1244.78V363.4L1186.38 362.2C1185.68 362.2 1184.98 362.2 1184.28 362.3C1176.48 363 1127.78 367.5 1128.08 367.6C1128.38 367.7 1121.18 367.9 1116.08 369.5C1115.48 369.7 1114.98 369.9 1114.38 370.3C1110.58 372.6 1107.98 376.5 1107.28 380.9C1106.68 384.3 1106.28 388.2 1106.28 389.4L1105.28 458.2Z',
                    '78':'M947.58 556.4C969.28 555.2 971.78 515.4 971.78 515.4C971.78 515.4 973.28 462.4 971.78 409.9C969.98 362.9 952.58 361 948.28 361.3C947.28 361.4 946.18 361.4 945.18 361.4H822.38L822.08 361.5C819.28 362.4 817.18 364.9 816.78 367.8C806.48 443.9 814.18 525.8 816.68 547.9C817.08 551.5 819.18 554.6 822.38 556.4C822.38 556.4 921.08 557.2 947.58 556.4Z',
                    '79':'M805.28 351.6H425.98V566.9H805.28V351.6Z',
                    '80':'M819.58 1128.5H805.38C805.38 1128.5 805.88 1174.9 805.38 1172.5C804.78 1169.5 425.28 1172.5 425.28 1172.5V982.5H806.48V1003.5C806.48 1003.5 812.78 1009.7 817.68 1021.5H819.68V990H927.68C927.68 990 942.48 993.4 952.58 996.2C957.78 997.7 961.78 1001.8 962.78 1007C970.08 1042.8 968.58 1102.9 961.88 1150.7C961.28 1155.4 958.08 1159.3 953.58 1161.1C943.88 1164.7 934.08 1167.7 923.68 1169.9H819.38L819.58 1128.5Z',

                    '90':'M1054.9 403.8V475.9C1054.9 481.2 1056.9 486.4 1060.6 490.3L1063.4 493.2C1067.1 497.1 1072.2 499.4 1077.6 499.5L1090 499.7L1090.1 516.8C1090.1 520.1 1092.8 522.8 1096.2 522.8H1139.3V514.4C1139.3 510.4 1136.1 507.2 1132.1 507.2H1099.8V512.4H1095.7V499.9H1097.6L1243.3 502.9C1247.8 503 1252.3 501.5 1255.8 498.7L1258.2 496.8V403.6L1054.9 403.8Z',
                    '91':'M845.7 554.2C887.3 564 977.7 658.3 989.9 671.1C1002 684 995 707.4 995 707.4L1000.2 708C999.8 714.2 996 727.1 993 739.3C990 751.4 966.2 748.4 966.2 748.4C966.2 748.4 889.8 751.9 875.4 752.1C877.2 719.9 847.5 709.4 847.5 709.4H816C816 709.4 794.4 713.2 791.8 731.2C789.2 749.1 790 755.1 790 755.1H701.5L701.9 554.2H845.7Z',
                    '92':'M550.6 755H694.3V554.2H393.3C386.8 554.2 380.4 555.6 374.7 558.4C368.9 561 365.2 566.7 365.2 573.1V755.2H468C468 755.2 467.3 751.3 469.4 732.7C471 718 485.3 711.7 491.2 709.8C492.6 709.3 494.1 709.1 495.7 709.1H525.7C537.2 711.1 546.5 725.3 546.5 725.3C550.6 734.5 552.1 744.9 550.6 755Z',
                    '93':'M105.3 402.7H306.9V474.8C306.9 480.1 304.9 485.3 301.2 489.2L298.4 492.1C294.7 496 289.6 498.3 284.2 498.4L271.8 498.6L271.7 515.3C271.7 518.8 268.8 521.6 265.3 521.6H222.5V511.9C222.5 508.6 225.1 506 228.4 506H262V511.2H266.1V498.8H264.2L118.5 501.8C114 501.9 109.5 500.4 106 497.5L103.6 495.6V402.7H105.3Z',
                    '94':'M306.9 398.1V326C306.9 320.7 304.9 315.5 301.2 311.6L298.4 308.7C294.7 304.8 289.6 302.5 284.2 302.4L271.8 302.2L271.7 285.1C271.7 281.8 269 279.1 265.6 279.1H222.5V287.5C222.5 291.5 225.7 294.7 229.6 294.7H262V289.5H266.1V302H264.2L118.5 299C114 298.9 109.5 300.4 106 303.3L103.6 305.2V398.4L306.9 398.1Z',
                    '95':'M550.4 30.7H694.1V231.6H393.1C386.6 231.6 380.2 230.2 374.5 227.4C368.7 224.8 365.1 219.1 365 212.7V30.7H467.9C467.9 30.7 467.2 34.6 469.3 53.2C470.9 67.9 485.2 74.2 491.1 76.1C492.5 76.6 494 76.8 495.6 76.8H525.6C537.1 74.8 546.4 60.6 546.4 60.6C550.4 51.2 552 40.8 550.4 30.7Z',
                    '96':'M845.7 231.5C887.3 221.8 977.8 127.4 989.9 114.6C1002.1 101.8 995 78.2 995 78.2L1000.2 77.6C999.8 71.4 996 58.5 993 46.3C990 34.1 966.2 37.2 966.2 37.2C966.2 37.2 889.7 33.6 875.4 33.4C877.2 65.6 847.4 76.2 847.4 76.2H816C816 76.2 794.4 72.4 791.8 54.4C789.2 36.5 790 30.5 790 30.5H701.5L701.9 231.4L845.7 231.5Z',
                    '97':'M1256.5 400.2H1054.9V328.1C1054.9 322.8 1056.9 317.6 1060.6 313.7L1063.4 310.8C1067.1 306.9 1072.2 304.6 1077.6 304.5L1090 304.3L1090.1 287.6C1090.1 284.1 1093 281.3 1096.5 281.3H1139.3V291C1139.3 294.3 1136.6 296.9 1133.4 296.9H1099.9V291.7H1095.8V304.2H1097.7L1243.4 301.2C1247.9 301.1 1252.4 302.6 1255.9 305.4L1258.3 307.3V400.2H1256.5Z',
                    '98':'M817.6 501.9H378.8C372.2 501.9 366.9 496.5 366.9 489.9V305.1C366.9 298.5 372.3 293.1 378.8 293.1H976.3C987.2 293.1 996.1 301.5 996.1 308.1V487C996.1 493.6 987.2 502 976.3 502L817.6 501.9Z',
                    '99':'M378.6 844.3H976.7C984.2 844.3 995.4 850.5 995.4 858.3V1005C995.4 1012.8 984.3 1019 976.7 1019H378.6C371.1 1019 364.9 1012.8 364.9 1005V858.3C365 850.6 371.1 844.3 378.6 844.3Z',



            }

def checkPathDict(content:dict,path:list):
    try:
        a = content
        for i in path:
            a = a[i]
        return True
    except:
        # print(path)
        return False


class PDF(FPDF):

    colontitle = None
    def set_car(self,model,vin):
        self.model = model
        self.vin = vin

    def footer(self):
        """Оформление нижнего контитула каждого листа"""

        # Устанавливаем курсор на 1,5 см от нижнего края

        # Настройка шрифта: Sans italic 8
        self.set_font('DejaVuSans', '', 8)
        # добавляем текст контитула:




        self.set_draw_color(196,196,196)
        self.line(x1=10,y1=260,x2=200,y2=260)
        self.set_xy(10,272)
        self.set_text_color(0,0,0)
        self.cell(w=0, h=0, text=f'Страница {self.page_no()} из {{nb}}',border=0)

        self.set_xy(10,277)
        self.set_text_color(96,96,96)
        self.cell(w=0, h=0, text=f'{self.model} \u2219 {datetime.datetime.now().strftime("%d.%m.%Y - %H:%M")} \u2219 {self.vin}',border=0)

        self.set_xy(171,277)
        self.set_text_color(0,0,0)
        self.cell(w=0, h=0, text="con.getStatic(1)",border=0,link="con.getStatic(3)")

        self.image(name=f'image/logo.png',w=10,x=180,y=265,link="con.getStatic(3)")

def createImageCrash(code,path):
    if len(code[0]) < 3:
        LIST = list(map(lambda c:c ,code))
        with open('image/car-points.svg', 'r', encoding='utf-8') as f:
            svg_code = f.read()
        soup = BeautifulSoup(svg_code,'lxml')

        for i in range(1,10):
            el = soup.find('path', attrs={'d':carcodes[str(i)]})


            if str(i) in code:
                el['fill'] = '#42AAFF'
            else:
                el['fill'] = 'white'

        for el in soup.find_all('mask', attrs={'fill':'black'}):
            el1 = el.findChild('path')
            d = el1['d']
            el1.extract()

            el2 = soup.find('path',attrs={'d':d})
            el3 = soup.find('path',attrs={'fill':'#3C3C3C'})

            el2.extract()
            el3.extract()

        # svg2png(bytestring=soup.find('svg').decode(),write_to=path)
    elif len(code[0]) == 3:
        DICT = {}
        LIST = list(map(lambda c:{c[1:]:c[0]},code))
        for i in LIST:
            DICT.update(i)

        if int(code[0][1:]) >= 10 and int(code[0][1:]) <= 25:
            with open('image/car-codes.svg', 'r', encoding='utf-8') as f:
                svg_code = f.read()
            soup = BeautifulSoup(svg_code,'lxml')
            end = 25
            start = 10

        elif int(code[0][1:]) >= 30 and int(code[0][1:]) <= 43:
            with open('image/bus-codes.svg', 'r', encoding='utf-8') as f:
                svg_code = f.read()
            soup = BeautifulSoup(svg_code,'lxml')
            end = 43
            start = 30

        elif int(code[0][1:]) >= 50 and int(code[0][1:]) <= 55:
            with open('image/motorbike-codes.svg', 'r', encoding='utf-8') as f:
                svg_code = f.read()
            soup = BeautifulSoup(svg_code,'lxml')
            end = 55
            start = 50
        elif int(code[0][1:]) >= 60 and int(code[0][1:]) <= 80:
            with open('image/truck-codes.svg', 'r', encoding='utf-8') as f:
                svg_code = f.read()
            soup = BeautifulSoup(svg_code,'lxml')
            end = 80
            start = 60
        elif int(code[0][1:]) >= 90 and int(code[0][1:]) <= 99:
            with open('image/truck-bus-codes.svg', 'r', encoding='utf-8') as f:
                svg_code = f.read()
            soup = BeautifulSoup(svg_code,'lxml')
            end = 99
            start = 90



        for el in soup.find_all('mask', attrs={'fill':'black'}):
            el1 = el.findChild('path')
            a = el1['d']
            el1.extract()

            el2 = soup.find('path',attrs={'d':a})
            el3 = soup.find('path',attrs={'fill':'#3C3C3C'})

            el2.extract()
            el3.extract()

        for place in range(start,end+1):

            if not str(place) in carcodes:
                continue
            el = soup.find('path', attrs={'d':carcodes[str(place)]})

            if el == None:
                continue

            if el != None and str(place) in DICT.keys():
                el['fill'] = '#ffff00' if DICT[str(place)] == '1' else '#FF0000'
            elif el != None:
                el['fill'] = 'white'



        # svg2png(bytestring=soup.find('svg').decode(),write_to=path)

def is_number(s):
    try:
        int(s)
        return True
    except ValueError:
        return False

def _str_years(god):
        return {
            god % 10 == 0: 'лет',
            god % 10 == 1: 'год',
            1 < god % 10 < 5: 'года',
            god % 10 > 4: 'лет',
            10 < god % 100 < 20: 'лет',
            god < 0: 'ошибка'
        }[True]

def splitMes(strOld,length):
    strOld = strOld.split(' ')
    strList = []
    str = ''

    for i in strOld:
        str = str + ' '+i
        if len(str) > length:
            strList.append(str.lstrip().rstrip())
            str = ''
    strList.append(str.lstrip().rstrip())
    return strList

def NumRecord(num):
    if int(str(num)[len(str(num))-1]) == 1:
        return f'{num} запись'
    elif int(str(num)[len(str(num))-1]) >= 2 and int(str(num)[len(str(num))-1]) <= 4:
        return f'{num} записи'
    else:
        return f'{num} записей'

async def createPDF(json :dict,id:str):

    await asyncio.sleep(0.7)

    jsonContent = json.get('result', {}).get('content', {}).get('content', {})

    try:
        model = (jsonContent['tech_data']['brand']['name']['normalized'] if 'normalized' in jsonContent['tech_data']['brand']['name'] else '') +' '+ (jsonContent['tech_data']['model']['name']['normalized'] if 'normalized' in jsonContent['tech_data']['model']['name'] else '')
    except:
        model = 'нет данных'

    if True:
        baseInfo = 'получена вся информация'
        colorBaseInfo = 'green'
    else:
        baseInfo = 'нет данных'
        colorBaseInfo = 'yellow'

    try:
        chassis = jsonContent['identifiers']['vehicle']['chassis']
    except:
        chassis = 'нет данных'

    try:
        year = jsonContent['tech_data']['year']
    except:
        year = 'нет данных'

    try:
        regNumber = jsonContent['identifiers']['vehicle']['reg_num']
    except:
        regNumber = 'нет данных'

    try:
        vin = jsonContent['identifiers']['vehicle']['vin']
    except:
        vin = 'нет данных'

    try:
        wheel = jsonContent["tech_data"]["wheel"]["position"]
    except:
        wheel = 'нет данных'

    try:
        ptsNumber = jsonContent['additional_info']['vehicle']['passport']["has_dublicate"]
    except:
        ptsNumber = False

    try:

        body = jsonContent['identifiers']['vehicle']['body']
    except:
        body = 'нет данных'

    try:
        engineNumber = jsonContent['tech_data']['engine']['number']
    except:
        engineNumber = 'нет данных'

    try:
        engineType = jsonContent['tech_data']['engine']['fuel']['type']
    except:
        engineType = "нет данных"
    try:
        engineModel = jsonContent['tech_data']['engine']['model']['name']
    except:
        engineModel = "нет данных"

    try:
        typeinfo = jsonContent['tech_data']['type']['name']
    except:
        typeinfo = 'нет данных'

    try:
        color = jsonContent['tech_data']['body']['color']['name']
    except:
        color = 'нет данных'

    try:
        engineVolume = f'{jsonContent["tech_data"]["engine"]["volume"]} см³'
    except:
        engineVolume = 'нет данных'

    try:
        powerHp = f'{jsonContent["tech_data"]["engine"]["power"]["hp"]} л. с.'
    except:
        powerHp = 'нет данных'

    try:
        powerKwt = f'{jsonContent["tech_data"]["engine"]["power"]["kw"]} кВт.'
    except:
        powerKwt = 'нет данных'

    try:
        category = jsonContent['additional_info']['vehicle']['category']['code']
    except:
        category = 'нет данных'

    try:
        numberPassport = jsonContent['additional_info']['vehicle']['passport']['number']
    except:
        numberPassport = 'нет данных'

    try:
        if not jsonContent['utilizations']['was_utilized']:
            utilicazia = 'не числится в утилизации'
            colorUtilicazia = 'green'
        else:
            utilicazia = 'числится в утилизации'
            colorUtilicazia = 'red'
    except:
        utilicazia = 'нет данных'
        colorUtilicazia = 'yellow'

    try:
        open = datetime.datetime.strptime(jsonContent["registration_actions"]["items"][len(jsonContent["registration_actions"]["items"])-1]["date"]['start'], '%Y-%m-%d %H:%M:%S')
        now = datetime.datetime.today()

        yearsWork = f'{round((now - open).days / 365)} {_str_years(round((now - open).days / 365))}'
        amountOwnershipPeriodlen = jsonContent["registration_actions"]["count"]
    except:
        yearsWork = 'нет данных'
        amountOwnershipPeriodlen = 'нет данных'

    try:
        msgProbeg = f'{jsonContent["mileages"]["items"][len(jsonContent["mileages"]["items"])-1]["mileage"]} км'

        if int(jsonContent["mileages"]["items"][len(jsonContent["mileages"]["items"])-1]["mileage"]) <=350000:
            colorProbeg = 'green'
        elif int(jsonContent["mileages"]["items"][len(jsonContent["mileages"]["items"])-1]["mileage"]) <= 1000000:
            colorProbeg = 'yellow'
        else:
            colorProbeg = 'red'
    except:
        msgProbeg = 'нет данных'
        colorProbeg = 'yellow'

    try:
        colEaisto = len(list(map(lambda item: item['filled_by']['source'] == 'gibdd.eaisto',jsonContent['mileages']['items'])))
        if colEaisto !=0:
            msgEaisto = NumRecord(colEaisto)
            colorEaisto = 'green'
        else:
            msgEaisto = 'не проходило'
            colorEaisto = 'yellow'
    except:
        msgEaisto = 'нет данных'
        colorEaisto = 'yellow'

    try:
        if jsonContent['registration_actions']['count'] != 0:
            msgOwnershipPeriod = NumRecord(jsonContent['registration_actions']['count'])
            if jsonContent['registration_actions']['count'] <=4:
                colorOwnershipPeriod = 'green'
            elif jsonContent['registration_actions']['count'] <=8:
                colorOwnershipPeriod = 'yellow'
            else:
                colorOwnershipPeriod = 'red'

        else:
            msgOwnershipPeriod = 'нет записей'
            colorOwnershipPeriod = 'green'
    except:
        msgOwnershipPeriod = 'нет данных'
        colorOwnershipPeriod = 'yellow'



    if regNumber != 'нет данных':
        p = pathlib.Path(f'./shared/{id}/image/')
        dirs = [x for x in p.iterdir() if x.suffix == '.jpg']
        lenDirs = len(dirs)
        if lenDirs !=0:
            amountPhoto = f'найдено {lenDirs} фото'
            colorAmountPhoto = 'green'
        else:
            amountPhoto = f'нет фотографий'
            colorAmountPhoto = 'yellow'
    else:
        amountPhoto = 'нет данных'
        colorAmountPhoto = 'yellow'

    try:
        msgCost = f"{jsonContent['market_prices']['ads']['items'][0]['amount']['min']} — {jsonContent['market_prices']['ads']['items'][0]['amount']['max']} руб."
    except:
        msgCost = 'нет данных'

    try:
        if jsonContent['taxi']['history']['count']!= 0:
            msgTaxiSearch  = NumRecord(jsonContent['taxi']['history']['count'])
            colorTaxiSearch = 'red'
        else:
            msgTaxiSearch = 'нет записей'
            colorTaxiSearch = 'green'
    except:
        msgTaxiSearch = 'нет данных'
        colorTaxiSearch = 'yellow'

    try:
        if jsonContent['pledges']['count'] != 0:
            msgZalogNotary = NumRecord(jsonContent['pledges']['count'])
            colorZalogNotary = 'red'
        else:
            msgZalogNotary = 'нет записей'
            colorZalogNotary = 'green'
    except:
            msgZalogNotary = 'нет данных'
            colorZalogNotary = 'yellow'

    try:
        if jsonContent['leasings']['count'] != 0:
            msgZalogFedresurs = NumRecord(jsonContent['leasings']['count'])
            colorZalogFedresurs = 'red'
        else:
            msgZalogFedresurs = 'нет записей'
            colorZalogFedresurs = 'green'
    except:
            msgZalogFedresurs = 'нет данных'
            colorZalogFedresurs = 'yellow'

    try:

        if jsonContent['stealings']['count'] != 0:
            msgGibddWanted = NumRecord(jsonContent['stealings']['count'])
            colorGibddWanted = 'red'
        else:
            msgGibddWanted = 'не в розыске'
            colorGibddWanted = 'green'
    except:
        msgGibddWanted = 'нет данных'
        colorGibddWanted = 'yellow'

    try:
        if jsonContent['restrictions']['registration_actions']['count'] != 0:
            msgGibddRestrict = NumRecord(jsonContent['restrictions']['registration_actions']['count'])
            colorGibddRestrict = 'red'
        else:
            msgGibddRestrict = 'нет ограничений'
            colorGibddRestrict = 'green'
    except:
        msgGibddRestrict = 'нет данных'
        colorGibddRestrict = 'yellow'

    try:
        if jsonContent['recall_campaigns']['count']!=0:
            msgGostVin = 'Отзыв автомобиля'
            colorGostVin = 'yellow'
        else:
            msgGostVin = 'автомобиль одобрен'
            colorGostVin = 'green'
    except:
        msgGostVin = 'нет данных'
        colorGostVin = 'yellow'

    try:
        if jsonContent['customs']['history']['count'] != 0:
            msgFtsAuto = 'пройдено'
            colorFtsAuto = 'green'
        else:
            msgFtsAuto = 'не проверялось'
            colorFtsAuto = 'green'
    except:
            msgFtsAuto = 'нет данных'
            colorFtsAuto = 'yellow'

    infoElptsPts = []

    try:
        if len(jsonContent['additional_info']['vehicle']['passport']['number']) == 15:
            msgElptsPts = 'есть'
            colorElptsPts = 'green'
            try:
                date = datetime.datetime.strptime(jsonContent['additional_info']['vehicle']['passport']['date'],'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
            except:
                date = "Отсутсвуют"
            try:
                name = jsonContent['additional_info']['vehicle']['passport']['org']['name']
            except:
                name = "Не определена"
            type: str = jsonContent['registration_actions']['items'][0]['type']
            if type.startswith("Постановка"):
                type.replace(":", ":\n")

            infoElptsPts =[
                {'name':'Тип ПТС:','description':'Электронный' if len(jsonContent['additional_info']['vehicle']['passport']['number']) == 15 else 'Бумажный','color':colorOwnershipPeriod},
                {'name':'Дубликат ПТС:','description':'Выдавался' if jsonContent['additional_info']['vehicle']['passport']['has_dublicate'] else 'Не выдавался','color':colorOwnershipPeriod},
                {'name':'Сведения о выпуске:','description':date,'color':colorOwnershipPeriod},
                {'name':'Организация:','description':name,'color':colorOwnershipPeriod},
                {'name':'','description':'','color':colorOwnershipPeriod},
                {'name':'','description':'','color':colorOwnershipPeriod},
                {'name':'Сведения о последнем регистрационном действии:','description':jsonContent['registration_actions']['items'][0]['type'],'color':colorOwnershipPeriod},

            ]

        else:
            msgElptsPts = 'не имеет'
            colorElptsPts = 'yellow'
    except:
        msgElptsPts = 'нет данных'
        colorElptsPts = 'yellow'

    try:
        if jsonContent['accidents']['history']['count'] != 0:
            msgGibddDtp =  NumRecord(jsonContent['accidents']['history']['count'])
            colorGibddDtp = 'red'
        else:
            msgGibddDtp = 'авто не было в ДТП'
            colorGibddDtp = 'green'
    except:
        msgGibddDtp = 'нет данных'
        colorGibddDtp = 'yellow'

    try:
        if jsonContent['accidents']['history']['count'] != 0:
            msgGibddDtp =  NumRecord(jsonContent['accidents']['history']['count'])
            colorGibddDtp = 'red'
        else:
            msgGibddDtp = 'авто не было в ДТП'
            colorGibddDtp = 'green'
    except:
        msgGibddDtp = 'нет данных'
        colorGibddDtp = 'yellow'

    try:
        CountFines = f"{jsonContent['fines']['count']} шт."
        if jsonContent['fines']['count'] < 5:
            colorCountFines = 'green'
        elif jsonContent['fines']['count'] <15:
            colorCountFines = 'yellow'
        else:
            colorCountFines = 'red'
    except:
        CountFines = 'нет данных'
        colorCountFines = 'yellow'


    await asyncio.sleep(0.7)
    pdf = PDF()
    pdf.set_car(model,vin)
    pdf.add_font('DejaVuSans', 'B', 'font/DejaVuSans-Bold.ttf',uni=True)
    pdf.add_font('DejaVuSans', 'I', 'font/DejaVuSans-ExtraLight.ttf',uni=True)
    pdf.add_font('DejaVuSans', '', 'font/DejaVuSans.ttf',uni=True)
    pdf.set_auto_page_break(True,40)


    pdf.set_draw_color(196,196,196)

    pdf.set_font('DejaVuSans', '', 8)
    pdf.add_page()

    pdf.set_font('DejaVuSans', '', 11)
    pdf.cell(w=0, h=5, text=f'      {"con.getStatic(1)"} - {"con.getStatic(2)"}',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

    pdf.image(name=f'image/logo.png',w=7,x=10,y=9,link="con.getStatic(3)")

    pdf.set_xy(10,20)

    pdf.set_text_color(0,0,0)
    pdf.set_font('DejaVuSans', 'B', 14)
    pdf.cell(w=0, h=8, text=f'Отчет по госномеру: {regNumber}',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)


    pdf.set_text_color(0,0,0)
    pdf.set_font('DejaVuSans', '', 10)
    pdf.cell(w=0, h=3, text=f'Сформировано: {datetime.datetime.now().strftime("%d.%m.%Yг. - %H:%M")}',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)


    pdf.set_fill_color(240,240,240)
    pdf.rect(x=168,y=0,w=32,h=32,round_corners=True,style='F')

    pdf.image(name=f'image/qr-code-white.png',w=25,x=172,y=2)
    pdf.set_xy(171,26)
    pdf.set_font('DejaVuSans', 'B', 6.5)
    pdf.cell(w=0, h=3, text=f'  Создано ботом:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
    pdf.cell(w=0, h=2, text="con.getStatic(1)",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0,link="con.getStatic(3)")

    if os.path.exists(f'shared/{id}/image/0.jpg'):
        im = Image.open(f'shared/{id}/image/0.jpg')
        if 0.465*im.size[0] < im.size[1]:

            unpart = (im.size[1] - (im.size[0] * 0.465))/2
            im.crop((0,unpart, im.size[0],im.size[1]-unpart)).save(f'shared/{id}/image/logo.jpg', quality=95)
        im.close()
        if os.path.exists(f'shared/{id}/image/logo.jpg'):
            pdf.image(name=f'shared/{id}/image/logo.jpg',w=190,x=10,y=pdf.get_y()+1)
        else:
            pdf.image(name=f'shared/{id}/image/0.jpg',w=190,x=10,y=pdf.get_y()+1)
        if os.path.exists(f'shared/{id}/image/number.png'):
            pdf.image(name=f'shared/{id}/image/number.png',w=46,x=13,y=pdf.get_y()+75.5)
        else:
            pdf.image(name=f'image/no_gosnumber.png',w=46,x=13,y=pdf.get_y()+75.5)
    else:
        pdf.image(name=f'image/car.jpeg',w=160,x=25,y=pdf.get_y()+1)


    infoFacial = [{'name':'Периоды владения ТС','description':msgOwnershipPeriod,'color':colorOwnershipPeriod},
            {'name':'Актуальный пробег','description':msgProbeg,'color':colorProbeg},
            {'name':'Участие в ДТП','description':msgGibddDtp,'color':colorGibddDtp},
            {'name':'Нахождение ТС в розыске','description':msgGibddWanted,'color':colorGibddWanted},
            {'name':'Ограничение ТС','description':msgGibddRestrict,'color':colorGibddRestrict},
            {'name':'Реестр залогов','description':msgZalogNotary,'color':colorZalogNotary},
            {'name':'Использование ТС в такси','description':msgTaxiSearch,'color':colorTaxiSearch},
            {'name':'Использование ТС в лизинге','description':msgZalogFedresurs,'color':colorZalogFedresurs},

            {'name':'Техническая информация','description':baseInfo,'color':colorBaseInfo},
            {'name':'Пройдено техосмотров','description':msgEaisto,'color':colorEaisto},
            {'name':'Информация об утилизации ТС','description':utilicazia,'color':colorUtilicazia},
            {'name':'Федеральная таможенная служба','description':msgFtsAuto,'color':colorFtsAuto},
            {'name':'Количество штрафов:','description':CountFines,'color':colorCountFines},
            {'name':'Отзывные компании','description':msgGostVin,'color':colorGostVin},
            {'name':'Электронный ПТС','description':msgElptsPts,'color':colorElptsPts},
            {'name':'Дополнительные фото ТС','description':amountPhoto,'color':colorAmountPhoto},
    ]
    y = pdf.get_y()
    for i in range(2):
        for j in range(8):

            if infoFacial[8*i+j]['color'] == 'green':
                status = '\u2714'
                r = green[0]
                g = green[1]
                b = green[2]
            elif infoFacial[8*i+j]['color'] == 'yellow':
                status = '\u2716'
                r = yellow[0]
                g = yellow[1]
                b = yellow[2]
            elif infoFacial[8*i+j]['color'] == 'red':
                status = '\u2716'
                r = red[0]
                g = red[1]
                b = red[2]



            pdf.set_text_color(r,g,b)
            pdf.set_font('DejaVuSans', 'B', 10)
            pdf.set_xy(15 + i * 90,y+100 + j*15)
            pdf.cell(w=90, h=5, text=f'{status} {infoFacial[8*i+j]["name"]}',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_text_color(0,0,0)
            pdf.set_font('DejaVuSans', '', 10)
            pdf.set_xy(15 + i * 90,y+105 + j*15)
            pdf.cell(w=90, h=5, text=f'    {infoFacial[8*i+j]["description"]}',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)




    pdf.set_draw_color(196,196,196)


    pdf.set_font('DejaVuSans', '', 8)
    pdf.add_page()

    pdf.set_draw_color(64,64,64)

    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y=5,w=200,h=15,round_corners=True,style='F')

    pdf.set_xy(20,10)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text=f'Техническая инфомация',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

    pdf.image(name=f'image/dok3.png',w=6,x=11,y=10)



    infoMain = [{'name':'Модель:','description':model,'color':''},
            {'name':'Год:','description':year,'color':''},
            {'name':'Цвет:','description':color,'color':''},
            {'name':'Госномер:','description':regNumber,'color':''},
            {'name':'VIN-код:','description':vin,'color':''},
            {'name':'Номер кузова:','description':body,'color':''},
            {'name':'Двигатель:','description':engineNumber,'color':''},
            {'name':'Объём:','description':engineVolume,'color':''},
            {'name':'Мощность:','description':f'{powerHp} / {powerKwt}','color':''},
            {'name':'Шасси:','description':chassis,'color':''},
            {'name':'Тип автомобиля:','description':typeinfo,'color':''},
            {'name':'Категория:','description':category,'color':''},
            {'name':'Рыночная стоимость:','description':msgCost,'color':''},
            {'name':'Таможенный паспорт:','description':numberPassport,'color':''},
            {'name':'','description':'','color':''},

    ]

    for i in range(3):
        for j in range(5):
            pdf.set_xy(10 + 60 * i,30 + 16*j)
            pdf.set_font('DejaVuSans', 'B', 11)
            pdf.cell(w=60, h=6, text=infoMain[j*3+i]['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
            pdf.set_xy(10 + 60 * i,36 + 16* j)
            pdf.set_font('DejaVuSans', '', 9)
            pdf.cell(w=60, h=6, text=str(infoMain[j*3+i]['description']),new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)



    y= pdf.get_y() +15


    pdf.set_draw_color(196,196,196)

    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y= y-5,w=200,h=15,round_corners=True,style='F')

    pdf.set_xy(20,y)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text='Электронный ПТС',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

    pdf.image(name=f'image/dok3.png',w=6,x=11,y=y)
    try:
            if len(jsonContent['additional_info']['vehicle']['passport']['number']) == 15:#json['elpts.php_pts']['found']
                for i in range(3):
                    for j in range(2):
                        pdf.set_xy(10 + 60 * i,y+20 + 16*j)
                        pdf.set_font('DejaVuSans', 'B', 11)
                        pdf.cell(w=60, h=6, text=infoElptsPts[j*3+i]['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                        pdf.set_xy(10 + 60 * i,y+26 + 16* j)
                        pdf.set_font('DejaVuSans', '', 9)
                        pdf.multi_cell(w=180, h=6, text=infoElptsPts[j*3+i]['description'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                pdf.set_xy(10,pdf.get_y()+3)
                pdf.set_font('DejaVuSans', 'B', 11)
                pdf.cell(w=60, h=6, text=infoElptsPts[len(infoElptsPts)-1]['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                pdf.set_xy(10,pdf.get_y())
                pdf.set_font('DejaVuSans', '', 9)
                pdf.cell(w=60, h=6, text=infoElptsPts[len(infoElptsPts)-1]['description'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
            else:
                y = pdf.get_y()
                pdf.set_fill_color(rosy[0],rosy[1],rosy[2])
                pdf.rect(x=8,y=y+7,w=100,h=11,style='F',round_corners=True,corner_radius=60)

                pdf.set_xy(16,y+10)
                pdf.set_font('DejaVuSans', '', 10)
                pdf.cell(w=0, h=5, text='Автомобиль не имеет Электронного ПТС!',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)


                pdf.set_xy(10,y+10)
                pdf.set_text_color(red[0],red[1],red[2])
                pdf.set_font('DejaVuSans', 'B', 18)
                pdf.cell(w=0, h=5, text='\u2297',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                pdf.set_text_color(0,0,0)
    except:
        y = pdf.get_y()
        pdf.set_fill_color(blue[0],blue[1],blue[2])
        pdf.rect(x=8,y=y+7,w=40,h=11,style='F',round_corners=True,corner_radius=60)

        pdf.set_xy(16,y+10)
        pdf.set_font('DejaVuSans', '', 11)
        pdf.cell(w=0, h=5, text=f'нет данных',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_xy(11,y+10)
        pdf.set_text_color(0,0,0)
        pdf.set_font('DejaVuSans', 'B', 15)
        pdf.cell(w=0, h=5, text="\u2139",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_draw_color(196,196,196)



    pdf.set_draw_color(196,196,196)


    pdf.set_font('DejaVuSans', '', 8)
    pdf.add_page()

    pdf.set_draw_color(64,64,64)

    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y=5,w=200,h=15,round_corners=True,style='F')

    pdf.set_xy(20,10)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text=f'Периоды владения',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

    pdf.image(name=f'image/calendar.png',w=8,x=11,y=9)


    pdf.set_fill_color(blue[0],blue[1],blue[2])
    pdf.rect(x=8,y=24,w=80,h=11,style='F',round_corners=True,corner_radius=60)
    pdf.set_xy(16,27)
    pdf.set_font('DejaVuSans', '', 10)


    pdf.cell(w=0, h=5, text=f'Общий срок эксплуатации: {yearsWork}',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

    pdf.set_xy(11,27)
    pdf.set_font('DejaVuSans', '', 13)
    pdf.cell(w=0, h=5, text='\u2139',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)


    pdf.set_fill_color(blue[0],blue[1],blue[2])
    pdf.rect(x=8,y=38,w=80,h=11,style='F',round_corners=True,corner_radius=60)

    pdf.set_xy(16,41)
    pdf.set_font('DejaVuSans', '', 10)

    pdf.cell(w=0, h=5, text=f'Количество владельцев: {amountOwnershipPeriodlen}',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

    pdf.set_xy(11,41)
    pdf.set_font('DejaVuSans', '', 13)
    pdf.cell(w=0, h=5, text='\u2139',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

    pdf.set_xy(11,58)
    l = 1
    try:
        for content in list(reversed(jsonContent["registration_actions"]["items"])):

            if pdf.get_y() > 220:
                pdf.set_font('DejaVuSans', '', 8)
                pdf.add_page()

            pdf.set_draw_color(196,196,196)
            pdf.line(10,pdf.get_y()-5,200,pdf.get_y()-5)

            pdf.set_font('DejaVuSans', 'B', 10)
            Type = f'Физическое лицо' if content["owner"]["type"] =='PERSON' else 'Юридическое лицо'
            pdf.cell(w=0, h=5, text=f'{l}. {Type}',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
            pdf.set_font('DejaVuSans', '', 10)
            From = datetime.datetime.strptime(content['date']['start'],'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Yг.') if checkPathDict(content,['date','start']) else 'нет данных'
            to = datetime.datetime.strptime(content['date']['end'],'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Yг.') if 'end' in content['date']  else 'null'
            pdf.cell(w=0, h=5, text=f'{From} — {to}'.replace("null","по настоящее время"),new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.cell(w=0, h=5, text='',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_font('DejaVuSans', 'B', 10)
            pdf.cell(w=0, h=5, text='Последняя операция: ',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_font('DejaVuSans', '', 10)


            pdf.multi_cell(w=185, h=5, text=content["type"] if checkPathDict(content,['type']) else 'нет данных',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)





            pdf.cell(w=0, h=8, text='',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
            l = l +1
    except:
        pass

    pdf.add_page()



    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y=5,w=200,h=15,round_corners=True,style='F')

    pdf.set_xy(20,10)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text=f'История пробегов',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
    pdf.image(name=f'image/speedo2.png',w=8,x=10,y=9)


    try:
        if jsonContent['mileages']['count'] >= 2:
            records = jsonContent['mileages']['items']
            records.sort(key = lambda x: datetime.datetime.strptime(x['date']['event'], '%Y-%m-%d %H:%M:%S').timestamp(),reverse=True)

            y = pdf.get_y()
            graph_x = 25
            graph_y = y +90
            pdf.set_draw_color(152,152,152)

            pdf.line(25,y+10,25,y+90)
            pdf.line(25,y+90,195,y+90)


            pdf.set_draw_color(192,192,192)
            pdf.set_line_width(0.1)

            for i in range(18):
                pdf.line(graph_x + 10 * i,graph_y,graph_x+ 10 * i,graph_y-80)
            for i in range(9):
                pdf.line(graph_x,graph_y- 10* i,graph_x+ 170,graph_y- 10* i)


            start_period_x = 0
            end_period_x = 170
            length_graph_x = end_period_x - start_period_x

            start_period_y = 0
            end_period_y = 80
            length_graph_y = end_period_y - start_period_y


            pdf.set_line_width(1)



            endDateStr = records[0]['date']['event']
            startDateStr = records[len(records)-1]['date']['event']
            endDate = datetime.datetime.strptime(endDateStr, '%Y-%m-%d %H:%M:%S')
            startDate = datetime.datetime.strptime(startDateStr, '%Y-%m-%d %H:%M:%S')

            length_graph_days = (endDate - startDate).days



            endProbeg = int(sorted(records,key = lambda x: int(x['mileage']))[len(records)-1]['mileage'])
            startProbeg = int(sorted(records,key = lambda x: int(x['mileage']))[0]['mileage'])

            point = []

            length_graph_probeg = endProbeg - startProbeg


            pdf.set_font('DejaVuSans', 'B', 8)
            a = False
            for record in records:
                Date = datetime.datetime.strptime(record['date']['event'], '%Y-%m-%d %H:%M:%S')
                length_Date = length_graph_x / length_graph_days * (Date - startDate).days

                probeg = int(record['mileage'])
                length_probeg = length_graph_y / length_graph_probeg * (probeg- startProbeg)

                point.append((graph_x +start_period_x + length_Date,graph_y- start_period_y- length_probeg,))

                pdf.set_xy(7 + (4 - len(str(record["mileage"]))),graph_y- start_period_y- length_probeg)
                pdf.cell(w=0,h=0,text=f'{record["mileage"]} км',border=0)

                pdf.set_xy(graph_x +start_period_x + length_Date-9,graph_y + 4 + (3 if a else 0))
                pdf.cell(w=0,h=0,text=Date.strftime('%d.%m.%Y'),border=0)

                a = not a


            pdf.set_draw_color(182,236,207)
            for i in range(len(point)-1):
                pdf.line(point[i][0],point[i][1],point[i+1][0],point[i+1][1])

            pdf.set_fill_color(green[0],green[1],green[2])
            for i in range(len(point)):
                rad = 2
                pdf.circle(x=point[i][0]-rad/2,y=point[i][1]-rad/2,r=rad,style='F')




            pdf.set_draw_color(192,192,192)
            pdf.set_fill_color(240,240,240)
            pdf.set_line_width(0.2)
            twisted = 0
            for i in range(1,len(records)):
                twisted += records[i]['mileage']-records[i-1]['mileage'] if records[i-1]['mileage']-records[i]['mileage'] < 0 else 0


            if twisted > 0:
                pdf.set_font('DejaVuSans', 'B', 10)
                pdf.set_xy(10,pdf.get_y()+10)
                pdf.cell(w=0, h=6, text=f'Есть подозрение на скрутку пробега на {twisted} км',border=0)

            pdf.set_xy(10,pdf.get_y()+10)
            pdf.set_font('DejaVuSans', 'B', 10)
            pdf.cell(w=60, h=6, text='Дата',border=0)
            pdf.cell(w=60, h=6, text='',border=0)
            pdf.cell(w=60, h=6, text='Пробег',new_x = XPos.LMARGIN,new_y=YPos.NEXT,border=0)


            for record in records:
                if pdf.get_y() > 240:
                    pdf.set_font('DejaVuSans', '', 8)
                    pdf.add_page()
                    pdf.set_font('DejaVuSans', 'B', 10)
                date = datetime.datetime.strptime(record['date']['event'], '%Y-%m-%d %H:%M:%S')

                pdf.line(10,pdf.get_y()+3,200,pdf.get_y()+3)
                pdf.cell(w=0, h=6, text='',new_x = XPos.LMARGIN,new_y=YPos.NEXT)
                pdf.cell(w=60, h=6, text=date.strftime('%d.%m.%Y г.'),border=0)
                pdf.cell(w=60, h=6, text='',border=0)
                pdf.cell(w=60, h=6, text=f'{record["mileage"]} км',new_x = XPos.LMARGIN,new_y=YPos.NEXT,border=0)

        else:
            y = pdf.get_y()
            pdf.set_fill_color(rosy[0],rosy[1],rosy[2])
            pdf.rect(x=8,y=y+7,w=110,h=11,style='F',round_corners=True,corner_radius=60)

            pdf.set_xy(16,y+10)
            pdf.set_font('DejaVuSans', '', 10)
            pdf.cell(w=0, h=5, text=f'Информация об истории пробегов не найдено!',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_xy(10,y+10)
            pdf.set_text_color(red[0],red[1],red[2])
            pdf.set_font('DejaVuSans', 'B', 15)
            pdf.cell(w=0, h=5, text='\u2297',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
            pdf.set_text_color(0,0,0)


            pdf.set_xy(10,pdf.get_y())

    except:
        y = pdf.get_y()
        pdf.set_fill_color(blue[0],blue[1],blue[2])
        pdf.rect(x=8,y=y+7,w=40,h=11,style='F',round_corners=True,corner_radius=60)

        pdf.set_xy(16,y+10)
        pdf.set_font('DejaVuSans', '', 11)
        pdf.cell(w=0, h=5, text=f'нет данных',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_xy(11,y+10)
        pdf.set_text_color(0,0,0)
        pdf.set_font('DejaVuSans', 'B', 15)
        pdf.cell(w=0, h=5, text="\u2139",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_draw_color(196,196,196)



    await asyncio.sleep(0.7)
    pdf.set_draw_color(196,196,196)

    pdf.add_page()

    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y=5,w=200,h=15,round_corners=True,style='F')

    pdf.set_xy(20,10)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text=f'Информация о ДТП',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
    pdf.image(name=f'image/cone.png',w=8,x=10,y=9)


    try:
        if jsonContent['accidents']['history']['count'] != 0:
            y = pdf.get_y()
            pdf.set_fill_color(rosy[0],rosy[1],rosy[2])
            pdf.rect(x=8,y=y+7,w=85,h=11,style='F',round_corners=True,corner_radius=60)

            pdf.set_xy(16,y+10)
            pdf.set_font('DejaVuSans', '', 11)
            pdf.cell(w=0, h=5, text=f'Количество происшествий: {jsonContent["accidents"]["history"]["count"]}',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_xy(10,y+10)
            pdf.set_text_color(red[0],red[1],red[2])
            pdf.set_font('DejaVuSans', 'B', 15)
            pdf.cell(w=0, h=5, text='\u2297',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_text_color(0,0,0)
            One = True
            photos = True
            l = 1
            for content in jsonContent["accidents"]["history"]["items"]:
                if not One and photos:
                    pdf.add_page()
                elif pdf.get_y() > 160:
                        pdf.set_font('DejaVuSans', '', 8)
                        pdf.add_page()
                else:
                    One = False

                infoDTP = [{'name':'Порядковый номер:','description':str(l),'color':''},
                {'name':'Дата аварии:','description':datetime.datetime.strptime(content['accident']['date'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y г.'),'color':''},
                {'name':'Номер аварии:','description':content['number'] if checkPathDict(content,['number']) else 'нет данных','color':''},
                {'name':'Количество участников:','description':str(content['participants']['total']) if checkPathDict(content,['participants','total']) else 'нет данных','color':''},
                {'name':'Состояние ТС:','description':content['state'] if checkPathDict(content,['state']) else 'нет данных','color':''},
                {'name':'Тип:','description':content['type']  if checkPathDict(content,['type']) else 'нет данных','color':''},
                {'name':'Место происшествия:','description':content['geo']['city'] if checkPathDict(content,['geo','city']) else 'нет данных','color':''},
                {'name':'','description':'','color':''},
                ]
                y= pdf.get_y() + 20

                pdf.set_draw_color(196,196,196)
                pdf.line(10,pdf.get_y()+10,200,pdf.get_y()+10)

                for k in range(2):
                    for j in range(4):
                        pdf.set_xy(10 + 100 * k,y + 16*j)
                        pdf.set_font('DejaVuSans', 'B', 11)
                        pdf.cell(w=60, h=6, text=infoDTP[j*2+k]['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                        pdf.set_xy(10 + 100 * k,y + 6 + 16* j)
                        pdf.set_font('DejaVuSans', '', 10)
                        pdf.multi_cell(w=170, h=5, text=infoDTP[j*2+k]['description'],border=0)
                id_list = 0
                for i, var in enumerate(list(content["damage"])):
                    if var == "codes":
                        id_list = i
                        break
                if len(content["damage"]) > 0:
                    createImageCrash(list(map(lambda x: str(x),content["damage"][list(content["damage"])[id_list]])),f'shared/{id}/image/crash/{content["number"]}.png')

                if os.path.exists(f'shared/{id}/image/crash/{content["number"]}.png'):
                    photos = True
                    pdf.image(name=f'shared/{id}/image/crash/{content["number"]}.png',w=100,x=5.5,y=pdf.get_y()+10)

                    pdf.set_fill_color(255,253,56)
                    pdf.rect(x=110,y=pdf.get_y()+10,w=10,h=10,style='F')
                    pdf.set_xy(124,pdf.get_y()+10)
                    pdf.set_font('DejaVuSans', '', 7)


                    pdf.multi_cell(w=73, h=5, text='Слабые повреждения \
\nПовреждения колёс (шин), элементов ходовой части, стекол, фар, указателей поворота, стоп-сигналов и других \
стеклянных элементов (в т.ч. зеркал), а также царапины, сколы, потертости лакокрасочного покрытия или \
пластиковых конструктивных деталей и другие повреждения без изменения геометрии элементов (деталей) \
кузова и эксплуатационных характеристик ТС',border=0)





                    pdf.set_fill_color(253,12,31)
                    pdf.rect(x=110,y=pdf.get_y()+3,w=10,h=10,style='F')
                    pdf.set_xy(124,pdf.get_y()+3)

                    pdf.multi_cell(w=73, h=5, text='Сильные повреждения \
\nВмятины, вырывы, заломы, перекосы, разрывы и другие повреждения с изменением геометрии элементов \
(деталей) кузова и эксплуатационных характеристик ТС.',border=0)





                    pdf.set_fill_color(66,170,255)
                    pdf.rect(x=110,y=pdf.get_y()+3,w=10,h=10,style='F')
                    pdf.set_xy(124,pdf.get_y()+3)

                    pdf.multi_cell(w=73, h=5, text='Другие повреждения\nПовреждения различного характера.',border=0)

                else:
                    photos = False

                l+=1
                pdf.set_font('DejaVuSans', '', 8)

        else:
            y = pdf.get_y()
            pdf.set_fill_color(220,236,220)
            pdf.rect(x=8,y=y+7,w=110,h=11,style='F',round_corners=True,corner_radius=60)

            pdf.set_xy(16,y+10)
            pdf.set_font('DejaVuSans', '', 11)
            pdf.cell(w=0, h=5, text=f'ВСЁ ЧИСТО! Автомобиль не участвовал в ДТП!',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_xy(10,y+10)
            pdf.set_text_color(green[0],green[1],green[2])
            pdf.set_font('DejaVuSans', 'B', 15)
            pdf.cell(w=0, h=5, text='\u2714',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_draw_color(196,196,196)
    except:
        y = pdf.get_y()
        pdf.set_fill_color(blue[0],blue[1],blue[2])
        pdf.rect(x=8,y=y+7,w=40,h=11,style='F',round_corners=True,corner_radius=60)

        pdf.set_xy(16,y+10)
        pdf.set_font('DejaVuSans', '', 11)
        pdf.cell(w=0, h=5, text=f'нет данных',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_xy(11,y+10)
        pdf.set_text_color(0,0,0)
        pdf.set_font('DejaVuSans', 'B', 15)
        pdf.cell(w=0, h=5, text="\u2139",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_draw_color(196,196,196)




    pdf.set_text_color(0,0,0)

    pdf.set_font('DejaVuSans', '', 8)
    pdf.add_page()

    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y=5,w=200,h=15,round_corners=True,style='F')

    pdf.set_xy(20,10)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text=f'Информация о техосмотрах',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
    pdf.image(name=f'image/key.png',w=8,x=10,y=9)

    try:
        if jsonContent['diagnostic_cards']['count'] != 0:
                LineOne = True
                for content in jsonContent['diagnostic_cards']['items']:
                        infoEaisto = [{'name':'Тип документа:','description':content['doc']['type'] if checkPathDict(content,['doc','type']) else 'нет данных','color':''},
                        {'name':'Номер:','description':content['doc']['number'] if checkPathDict(content,['doc','number']) else 'нет данных','color':''},
                        {'name':'Адрес техосмотра:','description':content['inspection']['place'] if checkPathDict(content,['inspection','place']) else 'нет данных','color':''},
                        {'name':'Дата окончания действия:','description':datetime.datetime.strptime(content['date']['to'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y') if checkPathDict(content,['date','to']) else 'нет данных','color':''},
                        {'name':'Дата начала действия:','description':datetime.datetime.strptime(content['date']['from'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y') if checkPathDict(content,['date','from']) else 'нет данных','color':''},
                        {'name':'','description':'','color':''},
                        ]

                        if pdf.get_y() > 200:
                            pdf.set_font('DejaVuSans', '', 8)
                            pdf.add_page()

                        y= pdf.get_y() + 8
                        if not LineOne:
                            pdf.set_draw_color(196,196,196)
                            pdf.line(10,pdf.get_y()+5,200,pdf.get_y()+5)
                        else:
                            LineOne = False
                        for i in range(3):
                            for j in range(2):
                                pdf.set_xy(10 + 70 * j,y + 16*i)
                                pdf.set_font('DejaVuSans', 'B', 11)
                                pdf.cell(w=60, h=6, text=infoEaisto[j*3+i]['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                                pdf.set_xy(10 + 70 * j,y + 6 + 16* i)
                                pdf.set_font('DejaVuSans', '', 11)
                                pdf.multi_cell(w=0, h=6, text=infoEaisto[j*3+i]['description'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)




        else:
                y = pdf.get_y()
                pdf.set_fill_color(blue[0],blue[1],blue[2])
                pdf.rect(x=8,y=y+7,w=90,h=11,style='F',round_corners=True,corner_radius=60)

                pdf.set_xy(16,y+10)
                pdf.set_font('DejaVuSans', '', 11)
                pdf.cell(w=0, h=5, text=f'Автомобиль не проходил техосмотр!',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                pdf.set_xy(10,y+10)
                pdf.set_text_color(0,0,0)
                pdf.set_font('DejaVuSans', 'B', 15)
                pdf.cell(w=0, h=5, text='\u2139',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                pdf.set_draw_color(196,196,196)
    except:
        y = pdf.get_y()
        pdf.set_fill_color(blue[0],blue[1],blue[2])
        pdf.rect(x=8,y=y+7,w=40,h=11,style='F',round_corners=True,corner_radius=60)

        pdf.set_xy(16,y+10)
        pdf.set_font('DejaVuSans', '', 11)
        pdf.cell(w=0, h=5, text=f'нет данных',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_xy(11,y+10)
        pdf.set_text_color(0,0,0)
        pdf.set_font('DejaVuSans', 'B', 15)
        pdf.cell(w=0, h=5, text="\u2139",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_draw_color(196,196,196)



    pdf.set_font('DejaVuSans', '', 8)
    pdf.add_page()

    pdf.set_text_color(0,0,0)
    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y=5,w=200,h=15,round_corners=True,style='F')

    pdf.set_xy(20,10)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text=f'Нахождение в розыске',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
    pdf.image(name=f'image/sign.png',w=8,x=10,y=9)
    l = 1
    try:
        if jsonContent['stealings']['count'] != 0:#json['gibdd.php_wanted']['count'] != 0
            LineOne = True
            for content in jsonContent["stealings"]["items"]:
                geo = [content['geo'][x] for x in content['geo'].keys() if content['geo'][x] != None]

                infoWanted = [{'name':'Порядковый номер:','description':str(l),'color':''},
                {'name':'Дата обьявления в розыск:','description':datetime.datetime.strptime(content['date']['stealing'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y'),'color':''},
                {'name':'Модель:','description':content['vehicle']['brand']['name'],'color':''},
                {'name':'VIN:','description':content['vehicle']['vin'],'color':''},
                {'name':'Регион розыска:','description':" ".join(str(x) for x in geo),'color':''},
                {'name':'','description':'','color':''},
                ]

                y= pdf.get_y() + 7
                if not LineOne:
                    pdf.set_draw_color(196,196,196)
                    pdf.line(10,pdf.get_y()+10,200,pdf.get_y()+10)
                else:
                    LineOne = False

                for i in range(2):
                    for j in range(3):
                        pdf.set_xy(10 + 100 * i,y + 16*j)
                        pdf.set_font('DejaVuSans', 'B', 11)
                        pdf.cell(w=60, h=6, text=infoWanted[j*2+i]['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                        pdf.set_xy(10 + 100 * i,y + 6 + 16* j)
                        pdf.set_font('DejaVuSans', '', 11)
                        # print(infoWanted[j*2+i]['description'])
                        pdf.cell(w=60, h=6, text=infoWanted[j*2+i]['description'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
            l+=1

        else:
            y = pdf.get_y()
            pdf.set_fill_color(220,236,220)
            pdf.rect(x=8,y=y+7,w=117,h=11,style='F',round_corners=True,corner_radius=60)

            pdf.set_xy(16,y+10)
            pdf.set_font('DejaVuSans', '', 11)
            pdf.cell(w=0, h=5, text=f'ВСЁ ЧИСТО! Автомобиль не находится в розыске!',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_xy(10,y+10)
            pdf.set_text_color(green[0],green[1],green[2])
            pdf.set_font('DejaVuSans', 'B', 15)

            pdf.cell(w=0, h=5, text='\u2714',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
    except:
        y = pdf.get_y()
        pdf.set_fill_color(blue[0],blue[1],blue[2])
        pdf.rect(x=8,y=y+7,w=40,h=11,style='F',round_corners=True,corner_radius=60)

        pdf.set_xy(16,y+10)
        pdf.set_font('DejaVuSans', '', 11)
        pdf.cell(w=0, h=5, text=f'нет данных',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_xy(11,y+10)
        pdf.set_text_color(0,0,0)
        pdf.set_font('DejaVuSans', 'B', 15)
        pdf.cell(w=0, h=5, text="\u2139",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_draw_color(196,196,196)


    pdf.set_text_color(0,0,0)
    pdf.set_font('DejaVuSans', '', 8)
    pdf.add_page()

    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y=5,w=200,h=15,round_corners=True,style='F')

    pdf.set_xy(20,10)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text=f'Наличие ограничений',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
    pdf.image(name=f'image/lock.png',w=8,x=10,y=9)
    с = 1

    try:
        if jsonContent['restrictions']['registration_actions']['count'] != 0:#json['gibdd.php_restrict']['count'] != 0
            LineOne = True
            pdf.set_y(pdf.get_y() -3)
            for content in jsonContent['restrictions']['registration_actions']['items']:
                    if pdf.get_y() > 180:
                        pdf.add_page()
                    if not LineOne:
                        pdf.set_draw_color(196,196,196)
                        pdf.line(10,pdf.get_y()+8,200,pdf.get_y()+8)
                    else:
                        LineOne = False

                    infoRestrict = [{'name':'Порядковый номер:','description':str(с),'color':''},
                    {'name':'Кем наложено:','description':content['initiator']['name'] if checkPathDict(content,['initiator','name']) else 'нет данных','color':''},
                    {'name':'Дата наложения ограничения:','description':datetime.datetime.strptime(content['date']['start'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y г.') if checkPathDict(content,['date','start']) else 'нет данных','color':''},
                    {'name':'Регион:','description':content['initiator']['region']['name'] if checkPathDict(content,['initiator','region','name']) else 'нет данных','color':''},
                    {'name':'Номер ограничения:','description':content['restrict']['number'] if checkPathDict(content,['restrict','number']) else 'нет данных','color':''},
                    {'name':'Вид ограничения:','description':content['restrict']['type']  if checkPathDict(content,['restrict','type']) else 'нет данных','color':''},
                    {'name':'Основание ограничения:','description':content['restrict']['reason'] if checkPathDict(content,['restrict','reason']) else 'нет данных','color':''},
                    {'name':'','description':'','color':''},
                    {'name':'','description':'','color':''},

                    ]



                    y = pdf.get_y() +11
                    for i in range(3):
                        for j in range(3):
                            pdf.set_xy(10 + 60 * i,y + 16*j)
                            pdf.set_font('DejaVuSans', 'B', 11)
                            pdf.cell(w=60, h=6, text=infoRestrict[j*3+i]['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                            pdf.set_xy(10 + 60 * i,y + 6 + 16* j)
                            pdf.set_font('DejaVuSans', '', 9)
                            pdf.multi_cell(w=0, h=4.7, text=infoRestrict[j*3+i]['description'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                    с+=1


        else:
            y = pdf.get_y()
            pdf.set_fill_color(220,236,220)
            pdf.rect(x=8,y=y+7,w=132,h=11,style='F',round_corners=True,corner_radius=60)

            pdf.set_xy(16,y+10)
            pdf.set_font('DejaVuSans', '', 11)
            pdf.cell(w=0, h=5, text=f'ВСЁ ЧИСТО! Автомобиль не имеет ограничений!',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_xy(10,y+10)
            pdf.set_text_color(green[0],green[1],green[2])
            pdf.set_font('DejaVuSans', 'B', 15)
            pdf.cell(w=0, h=5, text='\u2714',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
    except:
        y = pdf.get_y()
        pdf.set_fill_color(blue[0],blue[1],blue[2])
        pdf.rect(x=8,y=y+7,w=40,h=11,style='F',round_corners=True,corner_radius=60)

        pdf.set_xy(16,y+10)
        pdf.set_font('DejaVuSans', '', 11)
        pdf.cell(w=0, h=5, text=f'нет данных',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_xy(11,y+10)
        pdf.set_text_color(0,0,0)
        pdf.set_font('DejaVuSans', 'B', 15)
        pdf.cell(w=0, h=5, text="\u2139",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_draw_color(196,196,196)


    await asyncio.sleep(0.7)

    pdf.set_font('DejaVuSans', '', 8)
    pdf.add_page()


    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y=5,w=200,h=15,round_corners=True,style='F')
    pdf.set_text_color(0,0,0)


    pdf.set_xy(20,10)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text=f'Реестр залогов',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
    pdf.image(name=f'image/zalog.png',w=8,x=10,y=9)

    try:
        if jsonContent['pledges']['count'] != 0:#json['gibdd.php_restrict']['count'] != 0
            for i in jsonContent["pledges"]["items"]:
                    if pdf.get_y() > 220:
                        pdf.add_page()



                    y = pdf.get_y()
                    pdf.set_xy(10,y + 10)
                    pdf.set_font('DejaVuSans', 'B', 11)
                    pdf.cell(w=60, h=6, text='Дата регистрации:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                    pdf.set_font('DejaVuSans', '', 9)
                    pdf.cell(w=60, h=6, text=datetime.datetime.strptime(i['date']['event'],'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y г.'),new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                    pdf.set_xy(75,y + 10)
                    pdf.set_font('DejaVuSans', 'B', 11)
                    pdf.cell(w=60, h=6, text='Тип записи:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                    pdf.set_font('DejaVuSans', '', 9)
                    pdf.cell(w=60, h=6, text=i['type'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                    pdf.set_xy(130,y + 10)
                    pdf.set_font('DejaVuSans', 'B', 11)
                    pdf.cell(w=60, h=6, text='Номер записи:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                    pdf.set_font('DejaVuSans', '', 9)
                    pdf.cell(w=60, h=6, text=i['number'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                    pdf.set_xy(75,y + 30)
                    pdf.set_font('DejaVuSans', 'B', 11)
                    pdf.cell(w=60, h=6, text='Дата исключения:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                    pdf.set_font('DejaVuSans', '', 9)
                    pdf.cell(w=60, h=6, text="По настоящее время" if i['in_pledge'] else i["date"]["event"][:10].replace("-", "."),new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)


                    pdf.set_xy(10,y + 30)
                    pdf.set_font('DejaVuSans', 'B', 11)
                    pdf.cell(w=60, h=6, text='Статус:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                    pdf.set_font('DejaVuSans', '', 9)
                    pdf.cell(w=60, h=6, text="В залоге" if i['in_pledge'] else "Исключен из залога",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)



                    pdf.set_xy(10,pdf.get_y() + 5)
                    pdf.set_font('DejaVuSans', 'B', 11)
                    pdf.cell(w=60, h=6, text='Залогодатель:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                    for j in range(len(i['pledgors'])):
                        try:
                            dob = datetime.datetime.strptime(i['pledgors'][j]['dob'],'%Y-%m-%d').strftime('%d.%m.%Y')
                        except:
                            dob = "нет данных"
                        try:
                            pdf.set_xy(16,pdf.get_y() + 5)
                            pdf.set_font('DejaVuSans', 'B', 9)
                            pdf.cell(w=60, h=6, text=f"{j+1}. {'Физическое лицо' if i['pledgors'][j]['type'] == 'PERSON' else 'Юридическое лицо'}",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                        except:
                            pass

                    pdf.set_xy(10,pdf.get_y() + 5)
                    pdf.set_font('DejaVuSans', 'B', 11)
                    pdf.cell(w=60, h=6, text='Залогодержатель:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                    for j in range(len(i['pledgees'])):
                        pdf.set_xy(16,pdf.get_y() + 5)
                        pdf.set_font('DejaVuSans', 'B', 9)
                        pdf.multi_cell(w=185, h=5, text=f'{j+1}. {"Юридическое лицо" if i["pledgees"][j]["type"] == "LEGAL" else "Физическое лицо"}',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)




                    pdf.line(10,pdf.get_y()+3,200,pdf.get_y()+3)
        else:
            y = pdf.get_y()
            pdf.set_fill_color(220,236,220)
            pdf.rect(x=8,y=y+7,w=110,h=11,style='F',round_corners=True,corner_radius=60)

            pdf.set_xy(16,y+10)
            pdf.set_font('DejaVuSans', '', 11)
            pdf.cell(w=0, h=5, text=f'ВСЁ ЧИСТО! Автомобиль не находится залоге!',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_xy(10,y+10)
            pdf.set_text_color(green[0],green[1],green[2])
            pdf.set_font('DejaVuSans', 'B', 15)
            pdf.cell(w=0, h=5, text='\u2714',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_draw_color(196,196,196)
    except:
        y = pdf.get_y()
        pdf.set_fill_color(blue[0],blue[1],blue[2])
        pdf.rect(x=8,y=y+7,w=40,h=11,style='F',round_corners=True,corner_radius=60)

        pdf.set_xy(16,y+10)
        pdf.set_font('DejaVuSans', '', 11)
        pdf.cell(w=0, h=5, text=f'нет данных',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_xy(11,y+10)
        pdf.set_text_color(0,0,0)
        pdf.set_font('DejaVuSans', 'B', 15)
        pdf.cell(w=0, h=5, text="\u2139",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_draw_color(196,196,196)



    pdf.set_font('DejaVuSans', '',8)
    pdf.add_page()

    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y=5,w=200,h=15,round_corners=True,style='F')

    pdf.set_xy(20,10)

    pdf.set_text_color(0,0,0)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text=f'Использование в такси',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
    pdf.image(name=f'image/taxi.png',w=8,x=10,y=9)

    try:

        if jsonContent['taxi']['history']['count']!=0:#json['gibdd.php_restrict']['count'] != 0
            pdf.set_y(pdf.get_y()-7)
            LineOne = True
            for content in jsonContent['taxi']['history']['items']:
                if not LineOne:
                    pdf.set_draw_color(196,196,196)
                    pdf.line(10,pdf.get_y()+5,200,pdf.get_y()+5)
                else:
                    LineOne = False
                if pdf.get_y() > 200:
                    pdf.set_font('DejaVuSans', '', 8)
                    pdf.add_page()
                infoTaxi = [
                {'name':'Владелец компании:','description':content['company']['name'],'color':''},
                {'name':'ИНН компании:','description':content.get('tin'),'color':''},
                {'name':'КПП компании:','description':content.get('ogrn'),'color':''},
                {'name':'Год выпуска TC:','description':str(content['vehicle']['year']),'color':''},
                {'name':'Регистрационный номер ТС:','description':content['vehicle']['reg_num'],'color':''},
                {'name':'Модель ТС:','description':content['vehicle']['brand']['normalized']+' '+ content['vehicle']['model']['normalized'],'color':''},
                {'name':'Дата добавления в базу:','description':datetime.datetime.strptime(content['date']['start'],'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y г.'),'color':''},
                {'name':'Номер лицензии:','description':content['license']['number'],'color':''},
                {'name':'Статус лицензии:','description':"Аннулирована" if content['license']['status'] == "ANNULLED" else "Действительна",'color':''},
                {'name':'Дата получения лицензии:','description':datetime.datetime.strptime(content['date']['start'],'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y г.'),'color':''},
                {'name':'Дата окончания лицензии:','description':datetime.datetime.strptime(content['date']['end'],'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y г.'),'color':''},
                {'name':'Регион выдачи:','description':content["region"]["code"],'color':''},
                {'name':'Город выдачи:','description':None if content["city"] == [] else content["city"]["name"],'color':''},
                {'name':'','description':'','color':''},
                ]
                y= pdf.get_y() + 15
                for i in range(5):
                    for j in range(4):
                        pdf.set_xy(10 + 70 * i,y + 16*j)
                        pdf.set_font('DejaVuSans', 'B', 11)
                        pdf.cell(w=60, h=6, text=infoTaxi[j*3+i]['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                        pdf.set_xy(10 + 70 * i,y + 6 + 16* j)
                        pdf.set_font('DejaVuSans', '', 9)
                        if infoTaxi[j*3+i]['description'] == None:
                            infoTaxi[j*3+i]['description'] = 'нет данных'
                        pdf.cell(w=60, h=6, text=infoTaxi[j*3+i]['description'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)



        else:
            y = pdf.get_y()
            pdf.set_fill_color(220,236,220)
            pdf.rect(x=8,y=y+7,w=138,h=11,style='F',round_corners=True,corner_radius=60)

            pdf.set_xy(16,y+10)
            pdf.set_font('DejaVuSans', '', 11)
            pdf.cell(w=0, h=5, text=f'ВСЁ ЧИСТО! Автомобиль не использовался в такси!',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_xy(10,y+10)
            pdf.set_text_color(green[0],green[1],green[2])
            pdf.set_font('DejaVuSans', 'B', 15)
            pdf.cell(w=0, h=5, text='\u2714',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

    except:
        y = pdf.get_y()
        pdf.set_fill_color(blue[0],blue[1],blue[2])
        pdf.rect(x=8,y=y+7,w=40,h=11,style='F',round_corners=True,corner_radius=60)

        pdf.set_xy(16,y+10)
        pdf.set_font('DejaVuSans', '', 11)
        pdf.cell(w=0, h=5, text=f'нет данных',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_xy(11,y+10)
        pdf.set_text_color(0,0,0)
        pdf.set_font('DejaVuSans', 'B', 15)
        pdf.cell(w=0, h=5, text='\u2139',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

    pdf.set_draw_color(196,196,196)

    pdf.set_font('DejaVuSans', '', 8)
    pdf.add_page()

    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y=5,w=200,h=15,round_corners=True,style='F')
    pdf.set_text_color(0,0,0)

    pdf.set_xy(20,10)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text=f'Использование в лизинге',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
    pdf.image(name=f'image/lising.png',w=8,x=10,y=9)

    try:
        if jsonContent['leasings']['count'] != 0:#json['gibdd.php_restrict']['count'] != 0
            for content in jsonContent['leasings']['items']:
                    pdf.set_xy(10,pdf.get_y() + 10)

                    pdf.set_font('DejaVuSans', 'B', 11)
                    pdf.cell(w=60, h=6, text='ИНН лизинго­получателя:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                    pdf.set_font('DejaVuSans', '', 9)
                    pdf.cell(w=60, h=6, text=content['tin'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                    pdf.set_font('DejaVuSans', 'B', 11)
                    pdf.cell(w=60, h=6, text='Дата получения:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                    date = datetime.datetime.strptime(content['date']['event'],'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y г.')

                    pdf.set_font('DejaVuSans', '', 9)
                    pdf.cell(w=60, h=6, text=date,new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                    pdf.set_xy(10,pdf.get_y() + 5)
                    pdf.set_font('DejaVuSans', 'B', 11)
                    pdf.cell(w=60, h=6, text='Лизингополучатели:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                    for j in range(len(content['lessees'])):
                        if pdf.get_y() > 240:
                                pdf.set_font('DejaVuSans', '', 8)
                                pdf.add_page()
                        pdf.set_xy(22,pdf.get_y() + 5)
                        pdf.set_font('DejaVuSans', 'B', 9)
                        pdf.cell(w=60, h=6, text=f'{j+1}. {content["lessees"][j]["company"]["name"]}',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)


                    pdf.set_xy(10,pdf.get_y() + 5)
                    pdf.set_font('DejaVuSans', 'B', 11)
                    pdf.cell(w=60, h=6, text='Лизингодатели:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                    for j in range(len(content['lessors'])):
                        if pdf.get_y() > 240:
                                pdf.set_font('DejaVuSans', '', 8)
                                pdf.add_page()
                        pdf.set_xy(12,pdf.get_y() + 5)
                        pdf.set_font('DejaVuSans', 'B', 9)
                        pdf.multi_cell(w=0, h=5, text=f'{j+1}. {content["lessors"][j]["company"]["name"]}',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                    pdf.line(x1=10,y1=pdf.get_y()+5,x2=200,y2=pdf.get_y()+5)

        else:
            y = pdf.get_y()
            pdf.set_fill_color(220,236,220)
            pdf.rect(x=8,y=y+7,w=123,h=11,style='F',round_corners=True,corner_radius=60)

            pdf.set_xy(16,y+10)
            pdf.set_font('DejaVuSans', '', 11)
            pdf.cell(w=0, h=5, text=f'ВСЁ ЧИСТО! Автомобиль не использовался в лизинге!',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_xy(10,y+10)
            pdf.set_text_color(green[0],green[1],green[2])
            pdf.set_font('DejaVuSans', 'B', 15)
            pdf.cell(w=0, h=5, text='\u2714',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_draw_color(196,196,196)
    except:
        y = pdf.get_y()
        pdf.set_fill_color(blue[0],blue[1],blue[2])
        pdf.rect(x=8,y=y+7,w=40,h=11,style='F',round_corners=True,corner_radius=60)

        pdf.set_xy(16,y+10)
        pdf.set_font('DejaVuSans', '', 11)
        pdf.cell(w=0, h=5, text=f'нет данных',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_xy(11,y+10)
        pdf.set_text_color(0,0,0)
        pdf.set_font('DejaVuSans', 'B', 15)
        pdf.cell(w=0, h=5, text='\u2139',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_draw_color(196,196,196)

    pdf.set_text_color(0,0,0)

    pdf.set_font('DejaVuSans', '', 8)



    pdf.add_page()

    y= pdf.get_y()


    pdf.set_draw_color(196,196,196)

    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y= y-5,w=200,h=15,round_corners=True,style='F')
    pdf.set_text_color(0,0,0)

    pdf.set_xy(20,y)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text='Найденные объявления',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

    pdf.image(name=f'image/announcement.png',w=6,x=12,y=y)

    try:
        LineOne = True
        rezNone = 0

        if jsonContent['ads']['history']['count'] > 0:
            for content in jsonContent['ads']['history']['items']:

                if pdf.get_y() > 185:
                    pdf.set_font('DejaVuSans', '', 8)
                    pdf.add_page()

                if not LineOne:
                    pdf.set_draw_color(196,196,196)
                    pdf.line(10,pdf.get_y()+3,200,pdf.get_y()+3)
                else:
                    LineOne = False


                y = pdf.get_y()
                pdf.set_font('DejaVuSans', 'B', 10)

                infoSource = [{'name':'Источник:','description':content['uri'] if 'uri' in content else 'объявление из групп соц. сетей / мессенджеров','color':''},
                {'name':'','description':'','color':''},
                {'name':'','description':'','color':''},

                {'name':'Дата объявления:','description':datetime.datetime.strptime(content['date']['publish'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y г.') if checkPathDict(content, ['date', 'publish']) else "нет данных",'color':''},
                {'name':'Город:','description':content["geo"]["city"] if checkPathDict(content, ['geo', 'city']) else 'нет данных','color':''},
                {'name':'Владельцы:','description': str(content['vehicle']["owners"]["count"]) if checkPathDict(content, ['vehicle',"owners", 'count']) else "-",'color':''},
                {'name':'Пробег:','description':f'{content["vehicle"].get("mileage", 0)} км.' if checkPathDict(content, ['vehicle', 'mileage']) else "-",'color':''},
                {'name':'Цена:','description':f'{content["price"]["value"]} руб.' if checkPathDict(content, ['price', 'value']) else '-','color':''},
                {'name':'','description':'','color':''},
                {'name':'Описание объявления:','description':content.get('text', "-"),'color':''},

                {'name':'','description':'','color':''},
                {'name':'','description':'','color':''},
                {'name':'','description':'','color':''},
                {'name':'','description':'','color':''},
                {'name':'','description':'','color':''},
                {'name':'','description':'','color':''},

                ]
                c = 0
                for i in range(6):
                    for j in range(3):
                        try:
                            pdf.set_xy(10 + 60 * j,y+ 10 +16*i)
                            pdf.set_font('DejaVuSans', 'B', 11)
                            #(6,69,173)
                            pdf.cell(w=60, h=6, text=infoSource[c]['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                            pdf.set_xy(10 + 60 * j,y + 16 + 16*i)

                            pdf.set_font('DejaVuSans', '', 10)
                            pdf.multi_cell(w=0, h=5, text=str(infoSource[c]['description']),new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                        except:
                            pass
                        c += 1
                pdf.y = pdf.get_y()+5

        else:
            y = pdf.get_y()
            pdf.set_fill_color(blue[0],blue[1],blue[2])
            pdf.rect(x=8,y=y+7,w=65,h=11,style='F',round_corners=True,corner_radius=60)

            pdf.set_xy(16,y+10)
            pdf.set_font('DejaVuSans', '', 11)
            pdf.cell(w=0, h=5, text=f'Объявлений не найдено!',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_xy(11,y+10)
            pdf.set_text_color(0,0,0)
            pdf.set_font('DejaVuSans', 'B', 15)
            pdf.cell(w=0, h=5, text="\u2139",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_draw_color(196,196,196)


    except:
        y = pdf.get_y()
        pdf.set_fill_color(blue[0],blue[1],blue[2])
        pdf.rect(x=8,y=y+7,w=40,h=11,style='F',round_corners=True,corner_radius=60)

        pdf.set_xy(16,y+10)
        pdf.set_font('DejaVuSans', '', 11)
        pdf.cell(w=0, h=5, text=f'нет данных',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_xy(11,y+10)
        pdf.set_text_color(0,0,0)
        pdf.set_font('DejaVuSans', 'B', 15)
        pdf.cell(w=0, h=5, text="\u2139",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_draw_color(196,196,196)


    pdf.add_page()

    y= pdf.get_y()


    pdf.set_draw_color(196,196,196)

    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y= y-5,w=200,h=15,round_corners=True,style='F')
    pdf.set_text_color(0,0,0)

    pdf.set_xy(20,y)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text='Отзывные компании',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

    pdf.image(name=f'image/recall.png',w=6,x=12,y=y)

    try:
        if jsonContent['recall_campaigns']['count'] > 0:
            for content in jsonContent['recall_campaigns']['items']:
                if pdf.get_y() > 200:
                    pdf.add_page()

                pdf.set_xy(10,pdf.get_y()+6)
                pdf.set_text_color(0,0,0)

                pdf.set_font('DejaVuSans', 'B', 10)
                pdf.cell(w=0, h=6, text='Дата:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                pdf.set_font('DejaVuSans', '', 9)
                pdf.cell(w=0, h=6, text=datetime.datetime.strptime(content['date'],'%Y-%m-%d').strftime('%d.%m.%Y'),new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                pdf.set_font('DejaVuSans', 'B', 10)
                pdf.cell(w=0, h=6, text='Организация:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                pdf.set_font('DejaVuSans', '', 9)
                pdf.cell(w=0, h=6, text=content['company']['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                pdf.set_font('DejaVuSans', 'B', 10)
                pdf.cell(w=0, h=6, text='Причина:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                pdf.set_font('DejaVuSans', '', 9)
                pdf.multi_cell(w=0, h=5, text=content['description']['reason'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)


                pdf.set_font('DejaVuSans', 'B', 10)
                pdf.cell(w=0, h=6, text='Рекомендация:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                pdf.set_font('DejaVuSans', '', 9)

                pdf.multi_cell(w=0, h=5, text=content['description']['recommendation'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                pdf.set_draw_color(196,196,196)
                pdf.line(x1=10,y1=pdf.get_y()+3,x2=200,y2=pdf.get_y()+3)
        else:

            y = pdf.get_y()
            pdf.set_fill_color(blue[0],blue[1],blue[2])
            pdf.rect(x=8,y=y+7,w=130,h=11,style='F',round_corners=True,corner_radius=60)

            pdf.set_xy(16,y+10)
            pdf.set_font('DejaVuSans', '', 11)
            pdf.cell(w=0, h=5, text=f'Информация по отзывным компаниям не найдена!',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_xy(11,y+10)
            pdf.set_text_color(0,0,0)
            pdf.set_font('DejaVuSans', 'B', 15)
            pdf.cell(w=0, h=5, text="\u2139",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_draw_color(196,196,196)
    except:
        y = pdf.get_y()
        pdf.set_fill_color(blue[0],blue[1],blue[2])
        pdf.rect(x=8,y=y+7,w=40,h=11,style='F',round_corners=True,corner_radius=60)

        pdf.set_xy(16,y+10)
        pdf.set_font('DejaVuSans', '', 11)
        pdf.cell(w=0, h=5, text=f'нет данных',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_xy(11,y+10)
        pdf.set_text_color(0,0,0)
        pdf.set_font('DejaVuSans', 'B', 15)
        pdf.cell(w=0, h=5, text="\u2139",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_draw_color(196,196,196)



    pdf.set_text_color(0,0,0)
    pdf.add_page()

    y= pdf.get_y()


    pdf.set_draw_color(196,196,196)

    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y= y-5,w=200,h=15,round_corners=True,style='F')
    pdf.set_text_color(0,0,0)

    pdf.set_xy(20,y)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text='Штрафы',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

    pdf.image(name=f'image/recall.png',w=6,x=12,y=y)

    try:
        if jsonContent['fines']['count'] > 0:
            pdf.set_y(pdf.get_y() -3)
            LineOne = True
            l = 1
            for content in jsonContent['fines']['items']:




                if pdf.get_y() > 200:
                    pdf.add_page()
                else:
                    if not LineOne:
                        pdf.set_draw_color(196,196,196)
                        pdf.line(10,pdf.get_y()+3,200,pdf.get_y()+3)
                    else:
                        LineOne = False
                y = pdf.get_y() + 10

                fines = [
                        {'name':'Дата:','description':datetime.datetime.strptime(content['date']['accident'],'%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Yг. - %H:%M') if checkPathDict(content,['date','accident']) else 'нет данных','color':''},
                        {'name':'Сумма:','description':f'{content["amount"]["total"]} руб.' if checkPathDict(content,['amount','total']) else 'нет данных','color':''},
                        {'name':'Статус оплаты:','description':'Оплачен' if content['is_paid'] else 'Не оплачен','color':''},
                        {'name':'Инициатор:','description':content['wire']['bank']['name'] if checkPathDict(content,['wire','bank','name']) else 'нет данных','color':''},
                        {'name':'Статья:','description':(content['article']['code'] if checkPathDict(content,['article','code']) else '') + ' - '+ (content['article']['description'] if checkPathDict(content,['article','description']) else ''),'color':''},
                        {'name':'','description':''}
                ]


                pdf.set_xy(10 ,y)
                pdf.set_font('DejaVuSans', 'B', 10)
                pdf.cell(w=0, h=6, text='Порядковый номер:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                pdf.set_xy(10 ,y+6)
                pdf.set_font('DejaVuSans', '', 9)
                pdf.multi_cell(w=0, h=5, text=str(l),new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)


                pdf.set_xy(75 ,y)
                pdf.set_font('DejaVuSans', 'B', 10)
                pdf.cell(w=0, h=6, text=fines[0]['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                pdf.set_xy(75 ,y+6)
                pdf.set_font('DejaVuSans', '', 9)
                pdf.multi_cell(w=0, h=5, text=str(fines[0]['description']),new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)


                pdf.set_xy(130 ,y)
                pdf.set_font('DejaVuSans', 'B', 10)
                pdf.cell(w=0, h=6, text=fines[2]['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                pdf.set_xy(130 ,y+6)
                pdf.set_font('DejaVuSans', '', 9)
                pdf.multi_cell(w=0, h=5, text=str(fines[2]['description']),new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)



                y = pdf.get_y() + 3

                pdf.set_xy(10 ,y)
                pdf.set_font('DejaVuSans', 'B', 10)
                pdf.cell(w=0, h=6, text=fines[3]['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                pdf.set_xy(10 ,y+6)
                pdf.set_font('DejaVuSans', '', 9)
                pdf.multi_cell(w=115, h=5, text=str(fines[3]['description']),new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                a = pdf.get_y()

                pdf.set_xy(130 ,y)
                pdf.set_font('DejaVuSans', 'B', 10)
                pdf.cell(w=0, h=6, text=fines[1]['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                pdf.set_xy(130 ,y+6)
                pdf.set_font('DejaVuSans', '', 9)
                pdf.multi_cell(w=0, h=5, text=str(fines[1]['description']),new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)


                pdf.set_xy(10 ,a + 2)
                pdf.set_font('DejaVuSans', 'B', 10)
                pdf.cell(w=0, h=6, text=fines[4]['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                pdf.set_xy(10 ,pdf.get_y())
                pdf.set_font('DejaVuSans', '', 9)
                pdf.multi_cell(w=0, h=5, text=str(fines[4]['description']),new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)



                l +=1
        else:

            y = pdf.get_y()
            pdf.set_fill_color(220,236,220)
            pdf.rect(x=8,y=y+7,w=105,h=11,style='F',round_corners=True,corner_radius=60)

            pdf.set_xy(16,y+10)
            pdf.set_font('DejaVuSans', '', 11)
            pdf.cell(w=0, h=5, text=f'ВСЁ ЧИСТО! Автомобиль не имеет штрафов!',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_xy(10,y+10)
            pdf.set_text_color(green[0],green[1],green[2])
            pdf.set_font('DejaVuSans', 'B', 15)
            pdf.cell(w=0, h=5, text='\u2714',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

            pdf.set_draw_color(196,196,196)
    except:
        y = pdf.get_y()
        pdf.set_fill_color(blue[0],blue[1],blue[2])
        pdf.rect(x=8,y=y+7,w=40,h=11,style='F',round_corners=True,corner_radius=60)

        pdf.set_xy(16,y+10)
        pdf.set_font('DejaVuSans', '', 11)
        pdf.cell(w=0, h=5, text=f'нет данных',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_xy(11,y+10)
        pdf.set_text_color(0,0,0)
        pdf.set_font('DejaVuSans', 'B', 15)
        pdf.cell(w=0, h=5, text="\u2139",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_draw_color(196,196,196)







    pdf.add_page()
    pdf.set_text_color(0,0,0)
    y= pdf.get_y()

    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y=y,w=200,h=15,round_corners=True,style='F')



    pdf.set_xy(20,y+5)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text='Утилизация ТС',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

    pdf.image(name=f'image/disposal.png',w=6,x=11,y=y+5)
    try:
            if jsonContent['utilizations']['was_utilized']:
                y = pdf.get_y()
                pdf.set_fill_color(rosy[0],rosy[1],rosy[2])
                pdf.rect(x=8,y=y+7,w=130,h=11,style='F',round_corners=True,corner_radius=60)

                pdf.set_xy(16,y+10)
                pdf.set_font('DejaVuSans', '', 11)
                pdf.cell(w=0, h=5, text=f'ГИБДД сообщило, что автомобиль был утилизирован',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                pdf.set_xy(10,y+10)
                pdf.set_text_color(red[0],red[1],red[2])
                pdf.set_font('DejaVuSans', 'B', 15)
                pdf.cell(w=0, h=5, text='\u2716',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                pdf.set_draw_color(196,196,196)
            else:
                y = pdf.get_y()
                pdf.set_fill_color(220,236,220)
                pdf.rect(x=8,y=y+7,w=120,h=11,style='F',round_corners=True,corner_radius=60)

                pdf.set_xy(16,y+10)
                pdf.set_font('DejaVuSans', '', 11)
                pdf.cell(w=0, h=5, text=f'ВСЁ ЧИСТО! Автомобиль не числится в утилизации!',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                pdf.set_xy(10,y+10)
                pdf.set_text_color(green[0],green[1],green[2])
                pdf.set_font('DejaVuSans', 'B', 15)
                pdf.cell(w=0, h=5, text='\u2714',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                pdf.set_draw_color(196,196,196)
    except:
        y = pdf.get_y()
        pdf.set_fill_color(blue[0],blue[1],blue[2])
        pdf.rect(x=8,y=y+7,w=40,h=11,style='F',round_corners=True,corner_radius=60)

        pdf.set_xy(16,y+10)
        pdf.set_font('DejaVuSans', '', 11)
        pdf.cell(w=0, h=5, text=f'нет данных',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_xy(11,y+10)
        pdf.set_text_color(0,0,0)
        pdf.set_font('DejaVuSans', 'B', 15)
        pdf.cell(w=0, h=5, text="\u2139",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_draw_color(196,196,196)



    y = pdf.get_y() + 7
    pdf.set_text_color(0,0,0)
    pdf.set_fill_color(240,240,240)
    pdf.rect(x=5,y=y,w=200,h=15,round_corners=True,style='F')

    pdf.set_xy(20,y+5)
    pdf.set_font('DejaVuSans', 'B', 15)
    pdf.cell(w=0, h=6, text='Средняя рыночная стоимость',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

    pdf.image(name=f'image/disability.png',w=6,x=12,y=y+5)


    try:
        infoDTP = [{'name':'Марка:','description':jsonContent['tech_data']['brand']['name']['normalized'] if 'normalized' in jsonContent['tech_data']['brand']['name'] else ''},
        {'name':'Модель:','description':jsonContent['tech_data']['model']['name']['normalized'] if 'normalized' in jsonContent['tech_data']['model']['name'] else ''},
        {'name':'Год:','description':year},
        {'name':'Пробег:','description':msgProbeg},
        {'name':'Стоимость авто:','description':f'Рыночный диапазон стоимости для автомобиля {model} - {year} года выпуска, с пробегом {jsonContent["market_prices"]["ads"]["items"][0]["mileage"]}км, на дату {datetime.datetime.now().strftime("%d.%m.%Y")}г. составляет {jsonContent["market_prices"]["ads"]["items"][0]["amount"]["optimal"]}руб.'},
        {'name':'','description':''},
        ]
        y= pdf.get_y() + 10


        for k in range(2):
            for j in range(3):
                pdf.set_xy(10 + 100 * k,y + 16*j)
                pdf.set_font('DejaVuSans', 'B', 11)
                pdf.cell(w=60, h=6, text=infoDTP[j*2+k]['name'],new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
                pdf.set_xy(10 + 100 * k,y + 6 + 16* j)
                pdf.set_font('DejaVuSans', '', 9)
                pdf.multi_cell(w=0, h=5, text=str(infoDTP[j*2+k]['description']),new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)
        # else:
        #    y = pdf.get_y()
        #    pdf.set_fill_color(blue[0],blue[1],blue[2])
        #    pdf.rect(x=8,y=y+7,w=40,h=11,style='F',round_corners=True,corner_radius=60)

        #    pdf.set_xy(16,y+10)
        #    pdf.set_font('DejaVuSans', '', 11)
        #    pdf.cell(w=0, h=5, text=f'Для данного авто нельзя рассчитать стоимость',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        #    pdf.set_xy(11,y+10)
        #    pdf.set_text_color(0,0,0)
        #    pdf.set_font('DejaVuSans', 'B', 15)
        #    pdf.cell(w=0, h=5, text="\u2139",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        #    pdf.set_draw_color(196,196,196)




    except:
        y = pdf.get_y()
        pdf.set_fill_color(blue[0],blue[1],blue[2])
        pdf.rect(x=8,y=y+7,w=150,h=11,style='F',round_corners=True,corner_radius=60)

        pdf.set_xy(16,y+10)
        pdf.set_font('DejaVuSans', '', 11)
        pdf.cell(w=0, h=5, text=f'Для данного авто нельзя рассчитать стоимость!',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_xy(11,y+10)
        pdf.set_text_color(0,0,0)
        pdf.set_font('DejaVuSans', 'B', 15)
        pdf.cell(w=0, h=5, text="\u2139",new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

        pdf.set_draw_color(196,196,196)
        pdf.set_text_color(0,0,0)




    if regNumber != 'нет данных' and os.path.exists(f'shared/{id}/image/'):


        p = pathlib.Path(f'./shared/{id}/image/')

        LineOne = True


        maxPhoto = len([x for x in p.iterdir() if x.suffix == '.jpg'])
        d = 1

        print("maxPhoto", maxPhoto)
        print("d", d)

        while d <= maxPhoto:
            pdf.set_font('DejaVuSans', '', 8)
            pdf.add_page()

            print(f"id:{id} d:{d}", os.path.exists(f'shared/{id}/image/{d}.jpg'))

            if os.path.exists(f'shared/{id}/image/{d}.jpg'):
                im1 = Image.open(f'shared/{id}/image/{d}.jpg')
                ratio1 = im1.size[1] / im1.size[0]

                if ratio1 <= 1.16:
                    if os.path.exists(f'shared/{id}/image/{d+1}.jpg'):
                        im2 = Image.open(f'shared/{id}/image/{d+1}.jpg')
                        ratio2 = im2.size[1] / im2.size[0]
                        if ratio1 + ratio2 <= 1.16:
                            pdf.image(name=f'shared/{id}/image/{d}.jpg' ,w=200,x=5,y=24)

                            pdf.image(name=f'shared/{id}/image/{d+1}.jpg' ,w=200,x=5,y=28 + 200 * ratio1)

                            photo = [d,d+1]

                            d = d+1

                        else:
                            pdf.image(name=f'shared/{id}/image/{d}.jpg' ,w=200,x=5,y=24)
                            photo = [d]
                    else:
                        pdf.image(name=f'shared/{id}/image/{d}.jpg' ,w=200,x=5,y=24)
                        photo = [d]
                else:
                    photo = [d]
                    pdf.image(name=f'shared/{id}/image/{d}.jpg' ,h=230,x=(210 - 230 / ratio1) / 2,y=23)

                y= pdf.get_y()


                pdf.set_draw_color(196,196,196)

                pdf.set_fill_color(240,240,240)
                pdf.rect(x=5,y= y-5,w=200,h=15,round_corners=True,style='F')
                pdf.set_text_color(0,0,0)

                pdf.set_xy(20,y)
                pdf.set_font('DejaVuSans', 'B', 15)

                photoNum = list(map(lambda x: str(x),photo))

                photoStr = ', '.join(photoNum)

                pdf.cell(w=0, h=6, text=f'Фотография №{photoStr}:',new_x=XPos.LEFT,new_y=YPos.NEXT,border=0)

                pdf.image(name=f'image/photo.png',w=8,x=10,y=y-2)

            d += 1

    await asyncio.sleep(0.7)


    pdf.output(f'shared/{id}/report.pdf')
